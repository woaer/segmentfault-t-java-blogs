{
  "watchNum": "45226",
  "blogs": [
    {
      "id": "1190000018631870",
      "title": "MySQL数据库优化",
      "url": "/a/1190000018631870",
      "desc": "数据库优化一方面是找出系统的瓶颈,提高MySQL数据库的整体性能,而另一方面需要合理的结构设计和参数调整,以提高用户的相应速度,同时还要尽可能的节约系统资源,以便让系统提供更大的负荷.",
      "author": {
        "nick": "赵栩彬",
        "homepage": "/u/crabapple"
      }
    },
    {
      "id": "1190000018631417",
      "title": "数据结构与算法——二分查找练习",
      "url": "/a/1190000018631417",
      "desc": "前面说到了二分查找问题，看起来非常的简单，的确，前面的两种实现都不难，代码也很容易写，因为那只是最基础的二分查找问题了。今天来看看几种稍微复杂的二分查找问题：",
      "author": {
        "nick": "roseduan",
        "homepage": "/u/roseduan"
      }
    },
    {
      "id": "1190000018631406",
      "title": "SpringBoot整合Swagger2，再也不用维护接口文档了！",
      "url": "/a/1190000018631406",
      "desc": "前后端分离后，维护接口文档基本上是必不可少的工作。一个理想的状态是设计好后，接口文档发给前端和后端，大伙按照既定的规则各自开发，开发好了对接上了就可以上线了。当然这是一种非常理想的状态，实际开发中...",
      "author": {
        "nick": "江南一点雨",
        "homepage": "/u/lenve"
      }
    },
    {
      "id": "1190000018631197",
      "title": "金三银四面试季节之Java 核心面试技术点 - JVM 小结",
      "url": "/a/1190000018631197",
      "desc": "程序计数器（PC，Program Counter Register）。在 JVM 规范中，每个线程都有它自己的程序计数器，并且任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的 Java 方...",
      "author": {
        "nick": "linsheng9731",
        "homepage": "/u/linsheng9731"
      }
    },
    {
      "id": "1190000018630751",
      "title": "线程池运行模型源码全解析",
      "url": "/a/1190000018630751",
      "desc": "在上一篇文章《从0到1玩转线程池》中，我们了解了线程池的使用方法，以及向线程池中提交任务的完整流程和ThreadPoolExecutor.execute方法的源代码。在这篇文章中，我们将会从头阅读线程池ThreadPoolExecutor类的...",
      "author": {
        "nick": "兜里有辣条",
        "homepage": "/u/juxingzhutou"
      }
    },
    {
      "id": "1190000018630731",
      "title": "从0到1玩转线程池",
      "url": "/a/1190000018630731",
      "desc": "我们一般不会选择直接使用线程类Thread进行多线程编程，而是使用更方便的线程池来进行任务的调度和管理。线程池就像共享单车，我们只要在我们有需要的时候去获取就可以了。甚至可以说线程池更棒，我们只需要把任...",
      "author": {
        "nick": "兜里有辣条",
        "homepage": "/u/juxingzhutou"
      }
    },
    {
      "id": "1190000018630583",
      "title": "Java Optional API",
      "url": "/a/1190000018630583",
      "desc": "一位智者说过，没有处理过空指针异常就不算一个真正的 Java 程序员。这当然是开玩笑，但是空指针异常确实是很多程序出错的源头。于是，在 Java 8 引入了 java.util.Optional，Optional 用来代表一种 可能有可能没...",
      "author": {
        "nick": "时间被海绵吃了",
        "homepage": "/u/sunhengzhe"
      }
    },
    {
      "id": "1190000018630158",
      "title": "Java 项目里 classpath 具体指那个路径？",
      "url": "/a/1190000018630158",
      "desc": "只知道把配置文件如：mybatis.xml、spring-web.xml、applicationContext.xml等放到src目录（就是存放代码.java文件的目录），然后使用“classpath：xxx.xml”来读取，都放到src目录准没错，那么到底classpath到底指...",
      "author": {
        "nick": "vjvj110",
        "homepage": "/u/vjvj110"
      }
    },
    {
      "id": "1190000018630078",
      "title": "第二章 创建和销毁对象",
      "url": "/a/1190000018630078",
      "desc": "本章涉及创建和销毁对象，包括何时以及如何创建它们，何时以及如何避免创建它们，如何确保它们被及时销毁，以及如何管理在销毁之前必须进行的清理操作。",
      "author": {
        "nick": "coloured_glaze",
        "homepage": "/u/coloured_glaze"
      }
    },
    {
      "id": "1190000018628917",
      "title": "【跃迁之路】【761天】程序员高效学习方法论探索系列（实验阶段518-2019.3.23）",
      "url": "/a/1190000018628917",
      "desc": "从2017.10.6起，开启这个系列，目标只有一个：探索新的学习方法，实现跃迁式成长 实验期2年（2017.10.06 - 2019.10.06） 我将以自己为实验对象。 我将开源我的学习方法，方法不断更新迭代，全程记录分享 实验结束...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000018628215",
      "title": "共享信息",
      "url": "/a/1190000018628215",
      "desc": "Web组件，和大多数对象一样，通常与其他对象一起完成他们的任务。Web组件实现共享通过下列步骤： 使用私有帮助对象（例如，JavaBeans组件） 共享公共范围的对象 使用数据库 调用其他web资源。Java Servlet 提供访...",
      "author": {
        "nick": "团结",
        "homepage": "/u/2006"
      }
    },
    {
      "id": "1190000018627933",
      "title": "Servlet生命周期",
      "url": "/a/1190000018627933",
      "desc": "Servlet的生命周期是由它部署的容器控制的。当一个请求映射到一个Servlet，Servlet容器执行下面的步骤。 1 如果不存在这个Servlet的实例，容器执行： a. 加载Servlet类 b. 创建Servlet类实例 c. 通过调用init方法...",
      "author": {
        "nick": "团结",
        "homepage": "/u/2006"
      }
    },
    {
      "id": "1190000018627618",
      "title": "idea 启用火焰图功能",
      "url": "/a/1190000018627618",
      "desc": "开源项目 async-profiler 是一个Java 的低开销采样分析器，可以生成火焰图。idea集成了它的功能，使用起来更加的简单。",
      "author": {
        "nick": "Simeone_xu",
        "homepage": "/u/simeone_xu"
      }
    },
    {
      "id": "1190000018627125",
      "title": "struts",
      "url": "/a/1190000018627125",
      "desc": "客户端浏览器通过HTTP请求,访问控制器,然后控制器读取配置文件,然后执行服务器端跳转,执行相应的业务逻辑,然后,在调用模型层,取得的结果展示给jsp页面,最后返回给客户端浏览器",
      "author": {
        "nick": "小小____",
        "homepage": "/u/xiaoxiao___________"
      }
    },
    {
      "id": "1190000018626400",
      "title": "JSTL",
      "url": "/a/1190000018626400",
      "desc": "关于对本次学习的JSTL进行总结 下载 在mvnrepository中，直接搜索jstl，，找到下载量最高的，下载1.2版本。 下载完导入到项目里面就好了 jstl概述 {代码...} JSTL标签库 core：核心标签库 fmt：格式化标签库 sql...",
      "author": {
        "nick": "小咸鱼",
        "homepage": "/u/xiaoxianyu"
      }
    }
  ]
}