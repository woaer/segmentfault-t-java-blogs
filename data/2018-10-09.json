{
  "watchNum": "29937",
  "blogs": [
    {
      "id": "1190000016620438",
      "title": "Java基础【八】 - 集合 java.uti.ArrayList",
      "url": "/a/1190000016620438",
      "desc": "ArrayList基于数组实现，是一个动态的数组队列。但是它和Java中的数组又不一样，它的容量可以自动增长，类似于C语言中动态申请内存，动态增长内存。ArrayList继承了AbstractList，实现了RandomAccess、Cloneable...",
      "author": {
        "nick": "315574925",
        "homepage": "/u/315574925"
      }
    },
    {
      "id": "1190000016620289",
      "title": "Java异步编程——深入源码分析FutureTask",
      "url": "/a/1190000016620289",
      "desc": "之前通过源码详细分析了ThreadPoolExecutor《你真的懂ThreadPoolExecutor线程池技术吗？看了源码你会有全新的认识》。通过创建一个ThreadPoolExecutor，往里面丢任务就可以实现多线程异步执行了。",
      "author": {
        "nick": "Zack",
        "homepage": "/u/zack_587d6bc057a6a"
      }
    },
    {
      "id": "1190000016619431",
      "title": "使用dwr",
      "url": "/a/1190000016619431",
      "desc": "旧项目中使用了DWR方式实现ajax访问java后端，此前只是听过同事提起过DWR的代码泄露的安全问题，也没详细了解过，现在项目要使用dwr，故记录下使用dwr的过程。",
      "author": {
        "nick": "912093517",
        "homepage": "/u/912093517"
      }
    },
    {
      "id": "1190000016618180",
      "title": "Dubbo 源码分析 - SPI 机制",
      "url": "/a/1190000016618180",
      "desc": "SPI 全称为 Service Provider Interface，是 Java 提供的一种服务发现机制。SPI 的本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类。这样可以在运行时，动态为接口替换实现类...",
      "author": {
        "nick": "coolblog",
        "homepage": "/u/coolblog"
      }
    },
    {
      "id": "1190000016618160",
      "title": "用代码配置log4j相关参数",
      "url": "/a/1190000016618160",
      "desc": "在使用log4j将日志写到kafka时碰到一个问题，就是KafkaLog4jAppender出现异常后的日志处理直接使用log会将日志写到kafka,最终死循环，所以以上的类中如果出现异常，可以将日志写到本地文件中可以使用两种方式：",
      "author": {
        "nick": "Garfield",
        "homepage": "/u/soft_xiang"
      }
    },
    {
      "id": "1190000016607727",
      "title": "Java编程基础26——多线程下",
      "url": "/a/1190000016607727",
      "desc": "(3)提供公共的访问方式。 public static Singleton getInstance(){return s}",
      "author": {
        "nick": "扎瓦",
        "homepage": "/u/ideas"
      }
    },
    {
      "id": "1190000016617377",
      "title": "朱晔的互联网架构实践心得S1E3：相辅相成的存储五件套",
      "url": "/a/1190000016617377",
      "desc": "这里所说的五件套是指关系型数据库、索引型数据库、时序型数据库、文档型数据库和缓存型数据库。 上图显示了一套读写服务搭配这五种类型数据库的例子： 这里只是说明了我们可以这么来搭配这些类型的数据库，不是...",
      "author": {
        "nick": "13651657101",
        "homepage": "/u/13651657101"
      }
    },
    {
      "id": "1190000016616975",
      "title": "朱晔的互联网架构实践心得S1E2：屡试不爽的架构三马车",
      "url": "/a/1190000016616975",
      "desc": "这里所说的三架马车是指微服务、消息队列和定时任务。如下图所示，这里是一个三驾马车共同驱动的一个立体的互联网项目的架构。不管项目是大是小，这个架构模板的形态一旦定型了之后就不太会变，区别只是我们有更...",
      "author": {
        "nick": "13651657101",
        "homepage": "/u/13651657101"
      }
    },
    {
      "id": "1190000016615912",
      "title": " 【Leetcode】80. 删除排序数组中的重复项 II",
      "url": "/a/1190000016615912",
      "desc": "给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。",
      "author": {
        "nick": "Acceml",
        "homepage": "/u/acceml"
      }
    },
    {
      "id": "1190000016616832",
      "title": "【思维导图-索引篇】搞定数据库索引就是这么简单",
      "url": "/a/1190000016616832",
      "desc": "系列思维导图源文件（数据库+架构）以及思维导图制作软件—XMind8 破解安装，公众号后台回复：“思维导图” 免费领取！（下面的图片不是很清楚，原图非常清晰，另外提供给大家源文件也是为了大家根据自己需要进行修改）",
      "author": {
        "nick": "Snailclimb",
        "homepage": "/u/snailclimb"
      }
    },
    {
      "id": "1190000016616161",
      "title": "「造个轮子」——设计 HTTP 请求全局上下文",
      "url": "/a/1190000016616161",
      "desc": "前言 本次 Cicada 已经更新到了 v1.0.3。 主要是解决了两个 issue，#9(Boss线程数好像设置有误 ) #8(怎么返回纯字符串内容不要JSON格式？)。 所以本次的主要更新为： Cicada 采用合理的线程分配来处理接入请求线...",
      "author": {
        "nick": "crossoverJie",
        "homepage": "/u/crossoverjie"
      }
    },
    {
      "id": "1190000016615636",
      "title": "Dubbo基本用法-Dubbo Provider配置",
      "url": "/a/1190000016615636",
      "desc": "本章节主要讲述如何配置dubbo，按照配置方式上分，可以分为：XML配置，properties方式配置，注解方式配置，API调用方式配置。",
      "author": {
        "nick": "bali",
        "homepage": "/u/bali_5a0a92fba16aa"
      }
    },
    {
      "id": "1190000016616037",
      "title": "curl执行生成二维码，返回一堆乱码的处理",
      "url": "/a/1190000016616037",
      "desc": "最近在开发个微信小程序用到生成二维码的接口，curl执行生成二维码后，返回了一堆乱码，很是无奈，查遍资料最终得以解决。由于网上的资料过于散乱，不易查看，容易误导人等等原因，使我萌生了写下这篇文章的动机...",
      "author": {
        "nick": "zacklee",
        "homepage": "/u/zacklee"
      }
    },
    {
      "id": "1190000016615383",
      "title": "93非科班该不该考研？",
      "url": "/a/1190000016615383",
      "desc": "楼主是一个93年的非科班程序员，去年年底才开始学习前端知识，并且找了一个外包的实习工作，干了半年的时间一直觉得学不到什么东西就下定决心辞职了，辞职后学习了php、linux、redis这些基础的知识发现还是差了很...",
      "author": {
        "nick": "setname7",
        "homepage": "/u/setname7"
      }
    },
    {
      "id": "1190000016615066",
      "title": "分布式系统关注点：仅需这一篇，吃透「负载均衡」妥妥的！",
      "url": "/a/1190000016615066",
      "desc": "「负载均衡」是什么？常用「负载均衡」策略图解常用「负载均衡」策略优缺点和适用场景用「健康探测」来保障高可用结语一、「负载均衡」是什么",
      "author": {
        "nick": "如愿",
        "homepage": "/u/javakaifa"
      }
    }
  ]
}