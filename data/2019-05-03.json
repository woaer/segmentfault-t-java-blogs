{
  "watchNum": "49862",
  "blogs": [
    {
      "id": "1190000019060023",
      "title": "Java Socket编程之UDP编程",
      "url": "/a/1190000019060023",
      "desc": "UDP协议（用户数据报协议）是无连接的、不可靠的、无序的,速度快      进行数据传输时，首先将要传输的数据定义成数据报（Datagram），大小限制在64k，在数据报中指明数据索要达到的Socket（主机地址和端口号），...",
      "author": {
        "nick": "石志远",
        "homepage": "/u/shizhiyuan"
      }
    },
    {
      "id": "1190000019059977",
      "title": "Java Socket编程之TCP编程",
      "url": "/a/1190000019059977",
      "desc": "TCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道，在连接中进行大量数据的传输，效率会稍低",
      "author": {
        "nick": "石志远",
        "homepage": "/u/shizhiyuan"
      }
    },
    {
      "id": "1190000019059946",
      "title": "Java Socket编程之常识网络基础知识",
      "url": "/a/1190000019059946",
      "desc": "更多物联网高并发编程知识请移步：[链接] Java Socket编程之常识网络基础知识 网络基础知识（参考计算机网络）  《TCP/IP协议栈及OSI参考模型详解》           两台计算机间进行通讯需要以下三个条件            ...",
      "author": {
        "nick": "石志远",
        "homepage": "/u/shizhiyuan"
      }
    },
    {
      "id": "1190000019059842",
      "title": "那些年，我们用过的“定时调度”",
      "url": "/a/1190000019059842",
      "desc": "作为后端开发人员，我们总会遇到这样的业务场景：每周同步一批数据；每半个小时检查一遍服务器运行状况；每天早上八点给用户发送一份包含今日待办事项的邮件，等等。",
      "author": {
        "nick": "KerryWu",
        "homepage": "/u/kerrywu"
      }
    },
    {
      "id": "1190000019059828",
      "title": "如何在低版本的 Spring 中快速实现类似自动配置的功能",
      "url": "/a/1190000019059828",
      "desc": "在 Spring 4 后才引入了 @Conditional 等条件注解，它是 Spring Boot 中实现自动配置的最大功臣！那么问题来了：如果我们还在使用 Spring 3.x 的老版本，这时候要怎么实现一个自动配置呢？",
      "author": {
        "nick": "y0ngb1n",
        "homepage": "/u/y0ngb1n"
      }
    },
    {
      "id": "1190000019059810",
      "title": "Java获取当前进程ID以及所有Java进程的进程ID",
      "url": "/a/1190000019059810",
      "desc": "ManagementFactory是一个在运行时管理和监控Java VM的工厂类，它能提供很多管理VM的静态接口，比如RuntimeMXBean；RuntimeMXBean是Java虚拟机的运行时管理接口.",
      "author": {
        "nick": "石志远",
        "homepage": "/u/shizhiyuan"
      }
    },
    {
      "id": "1190000019059623",
      "title": "JDK源码那些事儿之HashMap.TreeNode",
      "url": "/a/1190000019059623",
      "desc": "前面几篇文章已经讲解过HashMap内部实现以及红黑树的基础知识，今天这篇文章就讲解之前HashMap中未讲解的红黑树操作部分，如果没了解红黑树，请去阅读前面的两篇文章，能更好的理解本章所讲解的红黑树源码操作，...",
      "author": {
        "nick": "orange",
        "homepage": "/u/orange_5c808c5cc3ad2"
      }
    },
    {
      "id": "1190000019059207",
      "title": "从零开始搭建SSM框架（Spring + Spring MVC + Mybatis）",
      "url": "/a/1190000019059207",
      "desc": "最近在回顾和总结一些技术，想到了把之前比较火的 SSM 框架重新搭建出来，作为一个小结，同时也希望本文章写出来能对大家有一些帮助和启发，因本人水平有限，难免可能会有一些不对之处，欢迎各位大神拍砖指教，共...",
      "author": {
        "nick": "Calvinist",
        "homepage": "/u/calvinit"
      }
    },
    {
      "id": "1190000019058754",
      "title": " ChannelPipeline 和 ChannelHandler",
      "url": "/a/1190000019058754",
      "desc": "Channel 概念与 java.nio.channel 概念一致, 用以连接IO设备 (socket, 文件等) 的纽带. 例如将网络的读、写, 客户端发起连接, 主动关闭连接, 链路关闭, 获取通信双方的网络地址等.",
      "author": {
        "nick": "sc_ik",
        "homepage": "/u/sc_ik"
      }
    },
    {
      "id": "1190000019058377",
      "title": "<java并发编程实战>学习二",
      "url": "/a/1190000019058377",
      "desc": "上一章介绍了如何通过同步来避免多个线程在同一时刻访问相同的数据，而本章将介绍如何共享和发布对象，从而使它们能够安全地由多个线程同时访问。",
      "author": {
        "nick": "旁观者z",
        "homepage": "/u/pangguanzhez"
      }
    },
    {
      "id": "1190000019057736",
      "title": "数据结构-栈",
      "url": "/a/1190000019057736",
      "desc": "栈（英语：stack）又称为堆栈或堆叠，栈作为一种数据结构，它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。　　...",
      "author": {
        "nick": "Gatlin",
        "homepage": "/u/gatlin"
      }
    },
    {
      "id": "1190000019057415",
      "title": "<java并发编程实战>学习一",
      "url": "/a/1190000019057415",
      "desc": "如果某个线程试图获得一个已经由他自己持有的锁，那么这个请求就会成功。“重入”意味着获取锁的操作的粒度是“线程”，而不是“调用”。",
      "author": {
        "nick": "旁观者z",
        "homepage": "/u/pangguanzhez"
      }
    },
    {
      "id": "1190000019056312",
      "title": "方法区到底是个什么鬼",
      "url": "/a/1190000019056312",
      "desc": "这两个是非常容易混淆的概念，永久代的对象放在方法区中，就会想当然地认为，方法区就等同于持久代的内存区域。事实上两者是这样的关系：",
      "author": {
        "nick": "菟潞寺沙弥",
        "homepage": "/u/transienthm"
      }
    },
    {
      "id": "1190000019054763",
      "title": "Spring笔记02_注解_IOC",
      "url": "/a/1190000019054763",
      "desc": "在工程中导入c3p0连接池需要的包com.springsource.com.mchange.v2.c3p0-0.9.1.2.jar",
      "author": {
        "nick": "itzhouq",
        "homepage": "/u/itzhouq"
      }
    },
    {
      "id": "1190000019054319",
      "title": "数据结构-数组",
      "url": "/a/1190000019054319",
      "desc": "数据结构中最基本的一个结构就是线性结构，而线性结构又分为连续存储结构和离散存储结构。所谓的连续存储结构其实就是数组。",
      "author": {
        "nick": "Gatlin",
        "homepage": "/u/gatlin"
      }
    }
  ]
}