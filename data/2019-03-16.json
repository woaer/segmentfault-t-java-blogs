{
  "watchNum": "44154",
  "blogs": [
    {
      "id": "1190000018527484",
      "title": "assertNotNull（）",
      "url": "/a/1190000018527484",
      "desc": "测试代码或者调试程序时，总会做出一些假设，断言就是用于在代码中捕捉这些假设。当要判断一个方法传入的参数时，我们就可以使用断言。",
      "author": {
        "nick": "Jamen",
        "homepage": "/u/jamen_zhang"
      }
    },
    {
      "id": "1190000018527045",
      "title": "Redis常用命令",
      "url": "/a/1190000018527045",
      "desc": "Redis常用命令 连接操作命令 {代码...} 持久化 {代码...} 远程服务控制 {代码...} 对value操作的命令 {代码...} String {代码...} List {代码...} Set {代码...} Hash {代码...} Redis 发布订阅命令 {代码...} Re...",
      "author": {
        "nick": "大大大西西瓜皮",
        "homepage": "/u/dadadaxixiguapi"
      }
    },
    {
      "id": "1190000018526581",
      "title": "Glide源码分析",
      "url": "/a/1190000018526581",
      "desc": "版本4.9.0 问题 Glide如何实现与生命周期的绑定？ Glide如何实现缓存？ Glide如何实现图片压缩? Glide如何实现与生命周期的绑定? 创建RequestManger,将其与with()传入 Activity, Fragment的生命周期绑定,这样做的...",
      "author": {
        "nick": "刘菲",
        "homepage": "/u/liufei_5a236ba169b46"
      }
    },
    {
      "id": "1190000018526325",
      "title": "【跃迁之路】【753天】程序员高效学习方法论探索系列（实验阶段510-2019.3.15）",
      "url": "/a/1190000018526325",
      "desc": "从2017.10.6起，开启这个系列，目标只有一个：探索新的学习方法，实现跃迁式成长 实验期2年（2017.10.06 - 2019.10.06） 我将以自己为实验对象。 我将开源我的学习方法，方法不断更新迭代，全程记录分享 实验结束...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000018525083",
      "title": "Java的call by value和call by reference",
      "url": "/a/1190000018525083",
      "desc": "call by value（值传递）：传递的是值（针对基本数据类型），如传递一个整型数值。实际上，按值传递在方法调用方法中，参数只是实际参数的一份拷贝。",
      "author": {
        "nick": "大大大西西瓜皮",
        "homepage": "/u/dadadaxixiguapi"
      }
    },
    {
      "id": "1190000018524932",
      "title": "【J2SE】java NIO 基础学习",
      "url": "/a/1190000018524932",
      "desc": "根据数据类型的不同，提供了对应的类型缓冲区（boolean类型除外），每一个Buffer类都是Buffer接口的一个实例。通过Buffer类.allocate()方法获取缓冲区；对缓冲区的数据进行操作可以使用put方法和get方法。",
      "author": {
        "nick": "xianz",
        "homepage": "/u/xianz"
      }
    },
    {
      "id": "1190000018524909",
      "title": "SpringBoot 填坑 | Shiro 与 Redis 多级缓存问题",
      "url": "/a/1190000018524909",
      "desc": "在一次项目实践中有实现多级缓存其中有已经包括了 Shiro 的 Cache ，本以为开启 redis 的缓存是一件很简单的事情只需要在启动类上加上 @EnableCaching 注解就会启动缓存管理了，但是问题出现了。",
      "author": {
        "nick": "一个优秀的废人",
        "homepage": "/u/nasus"
      }
    },
    {
      "id": "1190000018524608",
      "title": "Gradle原型模板工具调研",
      "url": "/a/1190000018524608",
      "desc": "为了方便小组里的同学快速创建新项目，并且保持框架及配置的一致性，维护了模板工程。接下来需要一个好用的工具来快速生成新项目。",
      "author": {
        "nick": "sandynz",
        "homepage": "/u/sandynz"
      }
    },
    {
      "id": "1190000018523871",
      "title": "2019年2月份Github上收获最多Star的10个Java项目",
      "url": "/a/1190000018523871",
      "desc": "该文已加入笔主的开源项目——JavaGuide（一份涵盖大部分Java程序员所需要掌握的核心知识的文档类项目),地址:[链接] 。觉得不错的话，记得点个Star。",
      "author": {
        "nick": "Snailclimb",
        "homepage": "/u/snailclimb"
      }
    },
    {
      "id": "1190000018523324",
      "title": "Java Bean + 注册验证",
      "url": "/a/1190000018523324",
      "desc": "概述 该技术已过时 jsp 已经过时,是因为代码杂糅在一起,没有做到完美的分离.不利于后期的维护 java bean 过时的原因在于面条代码的存在,即,各种代码杂乱的糅合在一起. 特点 组件式编程步骤封装成为组件,需要那个...",
      "author": {
        "nick": "小小____",
        "homepage": "/u/xiaoxiao___________"
      }
    },
    {
      "id": "1190000018523247",
      "title": "jsp 内置对象 登录 cookie + session",
      "url": "/a/1190000018523247",
      "desc": "一共两个页面当直接访问产品列表的时候,会判断用户是否登录,如果用户没有登录,则直接3秒跳转.如果用户登录,则不进行跳转登录页面:对于登录页面来说,直接输入用户名,密码.和数据库进行对比,进行登录.并进行密码的...",
      "author": {
        "nick": "小小____",
        "homepage": "/u/xiaoxiao___________"
      }
    },
    {
      "id": "1190000018522907",
      "title": "JSP 内置对象(一)",
      "url": "/a/1190000018522907",
      "desc": "page 只在一个保存属性,跳转无效request 一次请求保存属性,跳转依旧有效session 同一会话有效application 整个服务器上保存,所有用户都可使用",
      "author": {
        "nick": "小小____",
        "homepage": "/u/xiaoxiao___________"
      }
    },
    {
      "id": "1190000018522886",
      "title": "网站计数器 web映射",
      "url": "/a/1190000018522886",
      "desc": "文件保存在WEB-INF文件夹下,永远无法访问,此时,需要修改/WEB-INF/web.xml文件即可,达到映射的目的修改xml文件如下",
      "author": {
        "nick": "小小____",
        "homepage": "/u/xiaoxiao___________"
      }
    },
    {
      "id": "1190000018522526",
      "title": "Java代码执行顺序",
      "url": "/a/1190000018522526",
      "desc": "比如你定义一个函数void add（int a, int b），这里的a和b就是形参。当你进行函数调用的时候，add（1, 2），这里的1和2就是实参。",
      "author": {
        "nick": "码上实战",
        "homepage": "/u/flyhero"
      }
    },
    {
      "id": "1190000018521870",
      "title": "蚂蚁金服开源 SOFAJRaft：生产级 Java Raft 算法库",
      "url": "/a/1190000018521870",
      "desc": "SOFAJRaft 是一个基于 Raft 一致性算法的生产级高性能 Java 实现，支持 MULTI-RAFT-GROUP，适用于高负载低延迟的场景。 使用 SOFAJRaft 你可以专注于自己的业务领域，由 SOFAJRaft 负责处理所有与 Raft 相关的技...",
      "author": {
        "nick": "阿里云云栖社区",
        "homepage": "/u/yunqishequ_5aa899aad5395"
      }
    }
  ]
}