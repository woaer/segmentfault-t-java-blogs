{
  "watchNum": "24108",
  "blogs": [
    {
      "id": "1190000015704640",
      "title": "【Java猫说】SSM整合Netty5.0详细说明",
      "url": "/a/1190000015704640",
      "desc": "最近又有粉丝加Q群讨论netty整合SSM项目的方式等，我在这里抽了休息日的时候整理一下，一步一步的记录，注意的是，本案例仅实现了用netty整合SSM后与单片机等类TCP应用通信。",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000015702763",
      "title": "高级面试题总结—线程池还能这么玩？",
      "url": "/a/1190000015702763",
      "desc": "面试中我们经常会遇到多线程和线程池的问题，究竟如何回答呢？今天关于Java中的线程池，我们就来学习一下。",
      "author": {
        "nick": "程序员小灰",
        "homepage": "/u/chengxuyuanxiaohui"
      }
    },
    {
      "id": "1190000015702736",
      "title": "JAVA泛型通配符T，E，K，V说明",
      "url": "/a/1190000015702736",
      "desc": "泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。",
      "author": {
        "nick": "asoren",
        "homepage": "/u/asoren"
      }
    },
    {
      "id": "1190000015702428",
      "title": "java使用Collection.sort指定升序或降序的三种方法",
      "url": "/a/1190000015702428",
      "desc": "第一种方法，Bean中实现Comparator接口: {代码...} BeanClass类 {代码...} 第二种方法，自定义比较器 {代码...} MyComparator类 {代码...} 第三种，和第二种一样，不过使用匿名类 {代码...}",
      "author": {
        "nick": "瓦力",
        "homepage": "/u/wallee"
      }
    },
    {
      "id": "1190000015701886",
      "title": "【Java猫说】数据封装的好处（Getter、Setter）",
      "url": "/a/1190000015701886",
      "desc": "创建Getter和Setter给所有的实例变量，并寻求某种方法强制其他程序都必须通过Setter来设定变量而不是直接的存取。",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000015699763",
      "title": "揭秘：技术人突破瓶颈期，离不开这几个关键点",
      "url": "/a/1190000015699763",
      "desc": "作为一个技术人，不知道你有没有遇到过下面的情况？ “我学不到新东西” “我感觉没啥成长” “每天都在重复劳动” …… 其实，每个技术从业者，多多少少都会遇到工作或学习瓶颈期。产生瓶颈期，往往不是因为我们不够努力...",
      "author": {
        "nick": "茶轴的青春",
        "homepage": "/u/chazhoudeqingchun"
      }
    },
    {
      "id": "1190000015699276",
      "title": "Java 持有对象（11）",
      "url": "/a/1190000015699276",
      "desc": "如果一个程序只包含固定数量且其生命周期都是已知的对象，那么这是一个非常简单的程序。 1.泛型和类型安全的容器 通过使用泛型，可以在编译期防止将错误类型的对象放置到容器中. 2.基本概念 Java容器类库的用途是...",
      "author": {
        "nick": "Seasons20",
        "homepage": "/u/seasons20"
      }
    },
    {
      "id": "1190000015698569",
      "title": "180719-Quick-Task 动态脚本支持框架之使用介绍篇",
      "url": "/a/1190000015698569",
      "desc": "文章链接：[链接] Quick-Task 动态脚本支持框架之使用介绍篇 相关博文： 180702-QuickTask动态脚本支持框架整体介绍篇 QuickTask这个项目主要就是为了解决数据订正和接口验证不方便的场景，设计的一个及其简单的...",
      "author": {
        "nick": "小灰灰Blog",
        "homepage": "/u/xiaohuihuiblog"
      }
    },
    {
      "id": "1190000015698048",
      "title": "【跃迁之路】【529天】程序员高效学习方法论探索系列（实验阶段286-2018.07.19）",
      "url": "/a/1190000015698048",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015697951",
      "title": "【跃迁之路】【529天】刻意练习系列288（2018.07.19）",
      "url": "/a/1190000015697951",
      "desc": "技术的精进不能只是简单的刷题，而应该是不断的“刻意”练习 该系列改版后正式纳入【跃迁之路】专栏，持续更新",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015696690",
      "title": "Java的classloader",
      "url": "/a/1190000015696690",
      "desc": "class文件可以来自网络服务器等途径，来源比较有可定制性。比如zip文件，网络，甚至运行时动态生成的class",
      "author": {
        "nick": "younger969",
        "homepage": "/u/younger969"
      }
    },
    {
      "id": "1190000015696026",
      "title": "【Java猫说】关于Java方法及传参的一些问题",
      "url": "/a/1190000015696026",
      "desc": "在Java中所传递的所有东西都是值，但此值是变量所携带的值。还有，引用对象的变量所携带的是远程控制而不是对象本身，若你对方法传入参数，实际上传入的是远程控制的拷贝。",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000015695890",
      "title": "【Java猫说】Java对象的行为",
      "url": "/a/1190000015695890",
      "desc": "阅读本文约“2分钟” 对象的行为，这里的对象即上一章中的类吧（浅意） 状态影响行为，行为影响状态！ 这是一个令人深思的话题了。 同一类型的每个对象能够有不同的方法行为吗？ 仔细想一下其实是可以的，任一类的...",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000015695883",
      "title": "Spring整合Lettuce自定义缓存简单实现",
      "url": "/a/1190000015695883",
      "desc": "Spring框架提供了一系列丰富的接口帮助我们更快捷的开发应用程序，很多功能仅需要在配置文件声明一下或者在代码写几行就能够实现了，能够使我们更注重于应用的开发上，某种意义上助长了我们的“偷懒”行为。关于缓...",
      "author": {
        "nick": "Kanarien",
        "homepage": "/u/kanarien"
      }
    },
    {
      "id": "1190000015695631",
      "title": "springboot系列一：快速创建springboot项目",
      "url": "/a/1190000015695631",
      "desc": "1、访问Spring Initializr，选择版本，以及加入基本依赖，如下图所示： 2、eclipse导入springboot项目 3、测试代码 4、更改端口号 application.properties server.port=8090 5、运行配置 6、访问",
      "author": {
        "nick": "夕颜",
        "homepage": "/u/xiyan_5b4d947d4271b"
      }
    }
  ]
}