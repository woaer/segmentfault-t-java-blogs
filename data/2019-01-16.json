{
  "watchNum": "37408",
  "blogs": [
    {
      "id": "1190000017909550",
      "title": "StringBuffer 和 StringBuilder 的 3 个区别",
      "url": "/a/1190000017909550",
      "desc": "StringBuffer 和 StringBuilder 它们都是可变的字符串，不过它们之间的区别是 Java 初中级面试出现几率十分高的一道题。这么简单的一道题，栈长在最近的面试过程中，却经常遇到很多求职者说反，搞不清使用场景的...",
      "author": {
        "nick": "Java技术栈",
        "homepage": "/u/javastack"
      }
    },
    {
      "id": "1190000017909301",
      "title": "java日志框架",
      "url": "/a/1190000017909301",
      "desc": "java领域存在多种日志框架，目前常用的日志框架包括Log4j 1，Log4j 2，Commons Logging，Slf4j，Logback，Jul。",
      "author": {
        "nick": "小白龙",
        "homepage": "/u/xiaobailong_5b6017cbf24e2"
      }
    },
    {
      "id": "1190000017908482",
      "title": "Spring Boot统一异常处理最佳实践",
      "url": "/a/1190000017908482",
      "desc": "在 Web 开发中, 我们经常会需要处理各种异常, 这是一件棘手的事情, 对于很多人来说, 可能对异常处理有以下几个问题:",
      "author": {
        "nick": "Fundebug",
        "homepage": "/u/fundebug"
      }
    },
    {
      "id": "1190000017908424",
      "title": "基于K-means 切割多边形 JAVA实现",
      "url": "/a/1190000017908424",
      "desc": "基于K-means 切割多边形 JAVA实现 思路初稿详见多边形等分 依赖 geotools ekmeans {代码...} 实现过程 结果类 KmeanPolygonResult {代码...} k-means 聚合类 {代码...} 泰森多边形构造 {代码...} Kmeans 切割面类...",
      "author": {
        "nick": "wt1187982580",
        "homepage": "/u/wt1187982580"
      }
    },
    {
      "id": "1190000017908158",
      "title": "Volatile与多线程",
      "url": "/a/1190000017908158",
      "desc": "我们知道在多线程的场景下，线程安全是必须要着重考虑的。Java语言包含两种内在的同步机制：同步块（synchronize关键字）和 volatile 变量。但是其中 Volatile 变量虽然使用简单，有时候开销也比较低，但是同时它...",
      "author": {
        "nick": "小白龙",
        "homepage": "/u/xiaobailong_5b6017cbf24e2"
      }
    },
    {
      "id": "1190000017907781",
      "title": "网络协议 22 - RPC 协议（下）- 二进制类 RPC 协议",
      "url": "/a/1190000017907781",
      "desc": "    前面我们认识了两个常用文本类的 RPC 协议，对于陌生人之间的沟通，用 NBA、CBA 这样的缩略语，会使得协议约定非常不方便。",
      "author": {
        "nick": "北国风光",
        "homepage": "/u/beiguofengguang"
      }
    },
    {
      "id": "1190000017907304",
      "title": "解放双手 | Jenkins + gitlab + maven 自动打包部署项目",
      "url": "/a/1190000017907304",
      "desc": "不会偷懒的程序员不是好码农，传统的项目部署，有时候采用本地手动打包，再通过ssh传到服务器部署运行，这种方式对于单应用部署还算可以，不会耗费太大时间，但假如分布式项目，拆分为多个微服务部署，那么每个服...",
      "author": {
        "nick": "张少林同学",
        "homepage": "/u/zhangshaolintongxue_5c20a226c6646"
      }
    },
    {
      "id": "1190000017874192",
      "title": "《从0到1学习Flink》—— Flink 项目如何运行？",
      "url": "/a/1190000017874192",
      "desc": "之前写了不少 Flink 文章了，也有不少 demo，但是文章写的时候都是在本地直接运行 Main 类的 main 方法，其实 Flink 是支持在 UI 上上传 Flink Job 的 jar 包，然后运行得。最开始在第一篇 《从0到1学习Flink》——...",
      "author": {
        "nick": "zhisheng",
        "homepage": "/u/zhisheng"
      }
    },
    {
      "id": "1190000017904949",
      "title": "从0到1开发实战手机站（二）：Git提交规范配置",
      "url": "/a/1190000017904949",
      "desc": "生活不能随意过，代码也不能随意写。 前一篇文章我们已经把项目搭建好了，那是不是马上就开始写页面了呀？ NO！ 无论在哪家公司，都会有相应的代码规范。新入职的员工往往第一步就要接受代码规范的学习。 既然是...",
      "author": {
        "nick": "周小肆",
        "homepage": "/u/feleti"
      }
    },
    {
      "id": "1190000017904711",
      "title": "springboot设置热部署",
      "url": "/a/1190000017904711",
      "desc": "注：project 中添加 spring-boot-maven-plugin,主要在eclipse中使用，idea中不需要添加此配置。",
      "author": {
        "nick": "fanyuexin",
        "homepage": "/u/fanyuexin_5c3de402cf051"
      }
    },
    {
      "id": "1190000017904544",
      "title": "模板方法模式",
      "url": "/a/1190000017904544",
      "desc": "模板方法模式 定义 定义了一个算法的骨架。并允许子类为一个或多个步骤提供实现。 定义补充 模板方法是的子类可以在不改变算法结构的情况下，重新定义算法的某些步骤 类型 行为型 适用场景 一次性实现一个算法的...",
      "author": {
        "nick": "一号线",
        "homepage": "/u/yihaoxian"
      }
    },
    {
      "id": "1190000017904262",
      "title": "【跃迁之路】【695天】程序员高效学习方法论探索系列（实验阶段452-2019.1.15）",
      "url": "/a/1190000017904262",
      "desc": "从2017.10.6起，开启这个系列，目标只有一个：探索新的学习方法，实现跃迁式成长 实验期2年（2017.10.06 - 2019.10.06） 我将以自己为实验对象。 我将开源我的学习方法，方法不断更新迭代，全程记录分享 实验结束...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000017903058",
      "title": "JAVA并发编程--2.synchronied实现原理",
      "url": "/a/1190000017903058",
      "desc": "Mark Word：instanceOopDesc中的_mark成员，允许压缩。它用于存储对象的运行时记录信息，如哈希值、GC分代年龄(Age)、锁状态标志（偏向锁、轻量级锁、重量级锁）、线程持有的锁、偏向线程ID、偏向时间戳等",
      "author": {
        "nick": "bobo2",
        "homepage": "/u/bobo2"
      }
    },
    {
      "id": "1190000017903028",
      "title": "Java数据结构基础",
      "url": "/a/1190000017903028",
      "desc": "修改：由于arraylist不允许空的空间，当在一个arraylist的中间插入或者删除元素，需要遍历移动插入/删除位置到数组尾部的所有元素。另外arraylist需要扩容时，需要将实际存储的数组元素复制到一个新的数组去，因...",
      "author": {
        "nick": "bobo2",
        "homepage": "/u/bobo2"
      }
    },
    {
      "id": "1190000017902942",
      "title": "JAVA并发编程--1.基础概念",
      "url": "/a/1190000017902942",
      "desc": "进程线程协程 进程 进程是一个实体。每一个进程都有它自己的地址空间， 文本区域（text region） 数据区域（data region） 堆栈（stack region）。 文本区域存储处理器执行的代码；数据区域存储变量和进程执行期...",
      "author": {
        "nick": "bobo2",
        "homepage": "/u/bobo2"
      }
    }
  ]
}