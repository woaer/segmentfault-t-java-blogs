{
  "watchNum": "33777",
  "blogs": [
    {
      "id": "1190000017435046",
      "title": "渣渣的leetcode刷题笔记-树（1）",
      "url": "/a/1190000017435046",
      "desc": "能用BFS+queue解决的基本都可以用DFS+stack解决，尤其是用preorder，因为它有一种写法和层序遍历十分相近。",
      "author": {
        "nick": "我想做个正常人",
        "homepage": "/u/woxiangzuogezhengchangren"
      }
    },
    {
      "id": "1190000017434100",
      "title": "Java 8 重复注解与类型注解",
      "url": "/a/1190000017434100",
      "desc": "1. 概述 1.2 简介 Java 8 对注解处理提供了两点改进，可重复的注解及可用于类型的注解 2. 重复注解 要想定义重复注解，必须给它定义的容器类，还要使用 @Repeatable 注解修饰一下 {代码...} {代码...} 测试方法 {...",
      "author": {
        "nick": "凌风",
        "homepage": "/u/q549130180"
      }
    },
    {
      "id": "1190000017434066",
      "title": "Java 8 新的时间日期 API",
      "url": "/a/1190000017434066",
      "desc": "Java 8 引入了一套全新的时间日期API，操作起来更简便。简单介绍下，LocalDate和LocalTime和LocalDateTime的使用；",
      "author": {
        "nick": "凌风",
        "homepage": "/u/q549130180"
      }
    },
    {
      "id": "1190000017433982",
      "title": "Java 8 默认方法(Default Methods)",
      "url": "/a/1190000017433982",
      "desc": "在 Java 8之前，接口与其实现类之间的耦合度太高了，当需要为一个接口添加方法时，所有的实现类都必须随之修改。默认方法解决了这个问题，它可以为接口添加新的方法，而不会破坏已有的接口的实现。这在 lambda 表...",
      "author": {
        "nick": "凌风",
        "homepage": "/u/q549130180"
      }
    },
    {
      "id": "1190000017433857",
      "title": "Java 8 Optional类",
      "url": "/a/1190000017433857",
      "desc": "Optional<T> 类（java.util.Optional）是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念，并且可以避免空指针异常。",
      "author": {
        "nick": "凌风",
        "homepage": "/u/q549130180"
      }
    },
    {
      "id": "1190000017433768",
      "title": "Java 8 并行流与串行流",
      "url": "/a/1190000017433768",
      "desc": "Java 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作，Stream API 可以声明性地通过 parallel() 与 sequential() 在并行流与顺序流之间进行切换。",
      "author": {
        "nick": "凌风",
        "homepage": "/u/q549130180"
      }
    },
    {
      "id": "1190000017433553",
      "title": "Java 8 Stream API",
      "url": "/a/1190000017433553",
      "desc": "Java 8 中有两大最为重要的改革，第一个是 Lambda 表达式，另外一个则是 Stream API（java.util.stream.*）。",
      "author": {
        "nick": "凌风",
        "homepage": "/u/q549130180"
      }
    },
    {
      "id": "1190000017433485",
      "title": "Java 8 方法引用",
      "url": "/a/1190000017433485",
      "desc": "若 Lambda 体中的功能，已经有方法提供了实现，可以使用方法引用（可以将方法引用理解为 Lambda 表达式的另外一种表现形式）",
      "author": {
        "nick": "凌风",
        "homepage": "/u/q549130180"
      }
    },
    {
      "id": "1190000017432200",
      "title": "外行人都能看得懂的机器学习，错过了血亏！",
      "url": "/a/1190000017432200",
      "desc": "没错，这篇主要跟大家一起入门机器学习。作为一个开发者，”人工智能“肯定是听过的。作为一个开发面试者，肯定也会见过”机器学习“这个岗位(反正我校招的时候就遇到过)。",
      "author": {
        "nick": "Java3y",
        "homepage": "/u/java_3y"
      }
    },
    {
      "id": "1190000017431963",
      "title": "网络协议 14 - 流媒体协议：要说爱你不容易",
      "url": "/a/1190000017431963",
      "desc": "【前五篇】系列文章传送门： 网络协议 9 - TCP协议（下）：聪明反被聪明误 网络协议 10 - Socket 编程（上）：实践是检验真理的唯一标准 网络协议 11 - Socket 编程（下）：眼见为实耳听为虚 网络协议 12 - HTTP ...",
      "author": {
        "nick": "北国风光",
        "homepage": "/u/beiguofengguang"
      }
    },
    {
      "id": "1190000017430958",
      "title": "让你的系统“坚挺不倒”的最后一个大招——「降级」",
      "url": "/a/1190000017430958",
      "desc": "前面两篇我们已经聊过了「熔断」（如何在到处是“雷”的系统中「明哲保身」？这是第一招）和「限流」（想通关「限流」？只要这一篇），这次我们聊的就是「高可用三剑客」中剩下的「降级」。",
      "author": {
        "nick": "Zachary",
        "homepage": "/u/zachary_5b7b78d91f94d"
      }
    },
    {
      "id": "1190000017425870",
      "title": "MyBatis 源码解析（二）：SqlSession 执行流程",
      "url": "/a/1190000017425870",
      "desc": "上一篇文章（MyBatis 源码解析（一）：初始化和动态代理）分析了 MyBatis 解析配置文件以及 Mapper 动态代理相关的源码，这一篇接着上一篇探究 SqlSession 的执行流程，另外了解一下 MyBatis 中的缓存。",
      "author": {
        "nick": "然则",
        "homepage": "/u/ming_55e57cb682df4"
      }
    },
    {
      "id": "1190000017424975",
      "title": "Android逆向之路---脱壳360加固原理解析",
      "url": "/a/1190000017424975",
      "desc": "众所周知，上次说到了如何脱壳360加固，大致意思就是安装一个xposed插件，然后自动就会脱壳了，那么这个插件是如何工作的呢，本次重点说说这个。",
      "author": {
        "nick": "MartinHan",
        "homepage": "/u/martinhan"
      }
    },
    {
      "id": "1190000017422335",
      "title": "JVM详解4.类文件结构",
      "url": "/a/1190000017422335",
      "desc": "平台无关：Sun公司以及其他的虚拟机提供商发布了许多可以运行在各种不同平台上的虚拟机，这些虚拟机都可以载入和执行同一种平台无关的字节码，从而实现了程序的“一次编写,到处运行”。语言无关：语言无关的基础是...",
      "author": {
        "nick": "SpiderLucas",
        "homepage": "/u/spidersama"
      }
    },
    {
      "id": "1190000017422278",
      "title": "JVM详解3.JDK监控和故障处理工具",
      "url": "/a/1190000017422278",
      "desc": "这些工具大多数是tools.jar类库的一层薄的包装，它们的主要功能代码是在tools类库中实现的。还有一些甚至就是由Shell脚本直接生成的。",
      "author": {
        "nick": "SpiderLucas",
        "homepage": "/u/spidersama"
      }
    }
  ]
}