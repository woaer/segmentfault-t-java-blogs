{
  "watchNum": "54868",
  "blogs": [
    {
      "id": "1190000019492790",
      "title": "1090-受标签影响的最大值",
      "url": "/a/1190000019492790",
      "desc": "我们有一个项的集合，其中第 i 项的值为 values[i]，标签为 labels[i]。 我们从这些项中选出一个子集 S，这样一来： |S| <= num_wanted 对于任意的标签 L，子集 S 中标签为 L 的项的数目总满足 <= use_limi...",
      "author": {
        "nick": "Null",
        "homepage": "/u/null_ryan"
      }
    },
    {
      "id": "1190000019492673",
      "title": "1089-复写零",
      "url": "/a/1190000019492673",
      "desc": "给你一个长度固定的整数数组 arr，请你将该数组中出现的每个零都复写一遍，并将其余的元素向右平移。 注意：请不要在超过该数组长度的位置写入元素。 要求：请对输入的数组 就地 进行上述修改，不要从函数返回任...",
      "author": {
        "nick": "Null",
        "homepage": "/u/null_ryan"
      }
    },
    {
      "id": "1190000019492640",
      "title": "[Java并发-12] 原子类：无锁工具类的典范",
      "url": "/a/1190000019492640",
      "desc": "前面我们多次提到一个累加器的例子，示例代码如下。在这个例子中，add10K() 这个方法不是线程安全的，问题就出在变量 count 的可见性和 count+=1 的原子性上。可见性问题可以用 volatile 来解决，而原子性问题我...",
      "author": {
        "nick": "df007df",
        "homepage": "/u/df007df"
      }
    },
    {
      "id": "1190000019492635",
      "title": "7、服务发现&服务消费者Ribbon",
      "url": "/a/1190000019492635",
      "desc": "在《服务注册&服务提供者》这一篇可能学习了这么开发一个服务提供者，在生成上服务提供者通常是部署在内网上，即是服务提供者所在的服务器是与互联网完全隔离的。这篇说下服务发现（服务消费者），通常服务消...",
      "author": {
        "nick": "happyhuangjinjin",
        "homepage": "/u/happyhuangjinjin"
      }
    },
    {
      "id": "1190000019492612",
      "title": "6、如何获取配置中心的配置",
      "url": "/a/1190000019492612",
      "desc": "《配置中心》这篇博文说的是Config Server，本篇将和大家看看如何编写一个Config Client从Config Server获取配置。1、 先在仓库中创建如下配置文件（具体参考下面地址）",
      "author": {
        "nick": "happyhuangjinjin",
        "homepage": "/u/happyhuangjinjin"
      }
    },
    {
      "id": "1190000019491342",
      "title": "Java—System类入门学习",
      "url": "/a/1190000019491342",
      "desc": "System.gc() 可用于垃圾回收.当使用System.gc() 回收某个对象所占用的内存之前，通过要求程序调用适当的方法来清理资源，在没有明确指定资源清理的情况下，Java提高了默认机制来清理该对象的资源，就是调用object...",
      "author": {
        "nick": "BWH_Steven",
        "homepage": "/u/bwh_steven"
      }
    },
    {
      "id": "1190000019491299",
      "title": "辨析Java方法参数中的值传递和引用传递",
      "url": "/a/1190000019491299",
      "desc": "小瓜瓜作为一个Java初学者，今天跟我说她想通过一个Java方法，将外部变量通过参数传递到方法中去，进行逻辑处理，方法执行完毕之后，再对修改过的变量进行判断处理，代码如下所示。",
      "author": {
        "nick": "翎野君",
        "homepage": "/u/lingyejun"
      }
    },
    {
      "id": "1190000019490986",
      "title": "【全栈之路】JAVA基础课程六_集合（20190615v1.0）",
      "url": "/a/1190000019490986",
      "desc": "博客地址：[链接]本系列文章将主要针对JAVA一些基础知识点进行讲解，为平时归纳所总结，不管是刚接触JAVA开发菜鸟还是业界资深人士，都希望对广大同行带来一些帮助。若有问题请及时留言或加QQ：243042162。",
      "author": {
        "nick": "归雀楼",
        "homepage": "/u/it_park"
      }
    },
    {
      "id": "1190000019489721",
      "title": "乐字节Java学习01-Java语言概述及Java发展前景",
      "url": "/a/1190000019489721",
      "desc": "SUN公司全称是Stanford University Network. SUN公司是从斯坦福大学孵化器出的高科技公司。创立后，曾经市值名列IT公司第一位。在2001年时，市值2100亿美元，远超过google公司、IBM公司。成为在操作系统上最有可...",
      "author": {
        "nick": "乐字节",
        "homepage": "/u/lezijie"
      }
    },
    {
      "id": "1190000019488729",
      "title": "线程池原理浅析",
      "url": "/a/1190000019488729",
      "desc": "为了避免频繁重复的创建和销毁线程，我们可以让这些线程进行复用，在线程池中，总会有活跃的线程在占用，但是线程池中也会存在没有占用的线程，这些线程处于空闲状态，当有任务的时候会从池子里面拿去一个线程来...",
      "author": {
        "nick": "BattleHeart",
        "homepage": "/u/battleheart"
      }
    },
    {
      "id": "1190000019488403",
      "title": "关于Spring Boot你不得不知道的事",
      "url": "/a/1190000019488403",
      "desc": "Pivotal Software, Inc. is a software and services company based in San Francisco and Palo Alto, California, with several other offices. Divisions include Pivotal Labs (consulting services), Pivotal...",
      "author": {
        "nick": "陈斌",
        "homepage": "/u/chenbin_5a5473857f8e8"
      }
    },
    {
      "id": "1190000019486537",
      "title": "Android自定义实现按周签到打卡功能",
      "url": "/a/1190000019486537",
      "desc": "之前实现过《Android可签到的日历控件》的功能，跟这篇一样都是实现签到打卡功能，这篇实现的是按月进行打卡做标识，本篇内容实现的按周进行签到打卡。",
      "author": {
        "nick": "龙旋",
        "homepage": "/u/longxuan_5d03586f04659"
      }
    },
    {
      "id": "1190000019485423",
      "title": "Java设计模式-工厂模式",
      "url": "/a/1190000019485423",
      "desc": "简单工厂其实并不属于23种GOF设计模式之一，该模式是工厂方法模式的弱化（或者说是工厂方法模式的一种特例），因为简单，所以称为简单工厂模式（Simple Factory Pattern），也叫做静态工厂模式。虽然不是\"标准\"的...",
      "author": {
        "nick": "tianranll",
        "homepage": "/u/tianranll"
      }
    },
    {
      "id": "1190000019485319",
      "title": "【全栈之路】JAVA基础课程五_哲学家就餐问题（20190614v1.2）",
      "url": "/a/1190000019485319",
      "desc": "博客地址：[链接]本系列文章将主要针对JAVA一些基础知识点进行讲解，为平时归纳所总结，不管是刚接触JAVA开发菜鸟还是业界资深人士，都希望对广大同行带来一些帮助。若有问题请及时留言或加QQ：243042162。",
      "author": {
        "nick": "归雀楼",
        "homepage": "/u/it_park"
      }
    },
    {
      "id": "1190000019484958",
      "title": " java实现最长子序列 ",
      "url": "/a/1190000019484958",
      "desc": "要求 {代码...} 实现 {代码...}",
      "author": {
        "nick": "后端小白",
        "homepage": "/u/houduanxiaobai"
      }
    }
  ]
}