{
  "watchNum": "30005",
  "blogs": [
    {
      "id": "1190000016751211",
      "title": "925-长按键入",
      "url": "/a/1190000016751211",
      "desc": "你的朋友正在使用键盘输入他的名字 name。偶尔，在键入字符 c 时，按键可能会被长按，而字符可能被输入 1 次或多次。你将会检查键盘输入的字符 typed。如果它对应的可能是你的朋友的名字（其中一些字符可能被长按...",
      "author": {
        "nick": "Null",
        "homepage": "/u/null_ryan"
      }
    },
    {
      "id": "1190000016751071",
      "title": "关于Http协议，你必须要知道的",
      "url": "/a/1190000016751071",
      "desc": "HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网服务器传输超文本到本地浏览器的传送协议。HTTP 是基于 TCP/IP 协议通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。它...",
      "author": {
        "nick": "浪里行舟",
        "homepage": "/u/langlixingzhou"
      }
    },
    {
      "id": "1190000016750259",
      "title": "java基础——原型模式",
      "url": "/a/1190000016750259",
      "desc": "优点：1 性能优良，原型模式是在内存的二进制流的拷贝，要比直接new出一个对象性能要好的多。 2 逃避构造函数的约束，直接在内存中进行拷贝，构造函数不会执行。",
      "author": {
        "nick": "雨露",
        "homepage": "/u/yulu_5b175873aeaf9"
      }
    },
    {
      "id": "1190000016750094",
      "title": "java-netty-Netty in Action 5th-ch1-Netty and Java NIO APIs",
      "url": "/a/1190000016750094",
      "desc": "\"all problems in computer science can be solved by anotherlevel of indirection\"netty 是一个中间层的抽象，因为底层的网络编程的各种问题",
      "author": {
        "nick": "dhxx",
        "homepage": "/u/dhxx"
      }
    },
    {
      "id": "1190000016749801",
      "title": "【跃迁之路】【616天】程序员高效学习方法论探索系列（实验阶段373-2018.10.20）",
      "url": "/a/1190000016749801",
      "desc": "从2017.10.6起，开启这个系列，目标只有一个：探索新的学习方法，实现跃迁式成长 实验期2年（2017.10.06 - 2019.10.06） 我将以自己为实验对象。 我将开源我的学习方法，方法不断更新迭代，全程记录分享 实验结束...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000016749514",
      "title": " java基础——建造者模式",
      "url": "/a/1190000016749514",
      "desc": "{代码...} 不同的具体的业务实现类 具体的业务场景 结果",
      "author": {
        "nick": "雨露",
        "homepage": "/u/yulu_5b175873aeaf9"
      }
    },
    {
      "id": "1190000016749455",
      "title": "巧用代理设计模式(Proxy Design Pattern)改善前端图片加载体验",
      "url": "/a/1190000016749455",
      "desc": "这篇文章介绍一种使用代理设计模式（Proxy Design Pattern）的方法来改善您的前端应用里图片加载的体验。",
      "author": {
        "nick": "JerryWangSAP",
        "homepage": "/u/jerrywangsap"
      }
    },
    {
      "id": "1190000016749366",
      "title": "通过Java代码实现图片的放大和缩小",
      "url": "/a/1190000016749366",
      "desc": "先看看效果吧。可以看到这个开发好的安卓应用有三个按钮：Zoom In缩小图片，Zoom Out放大图片和Save保存。",
      "author": {
        "nick": "JerryWangSAP",
        "homepage": "/u/jerrywangsap"
      }
    },
    {
      "id": "1190000016749222",
      "title": "如何使用Java代码给图片增加倒影效果",
      "url": "/a/1190000016749222",
      "desc": "效果 倒影率为90%时的效果： 倒影率10%时的效果: 实现原理 倒影率作为参数rate 传入Reflection button的事件处理函数： CreateImageWithReflection这个Java方法会根据传入的倒影率参数rate，创建一个对应高度的re...",
      "author": {
        "nick": "JerryWangSAP",
        "homepage": "/u/jerrywangsap"
      }
    },
    {
      "id": "1190000016748962",
      "title": "【十年磨一剑】我们能从阿里架构师的身上学到什么？",
      "url": "/a/1190000016748962",
      "desc": "本文是看到阿里巴巴系统架构师黄勇的采访记录有感而发，如有侵权，请联系我。下面就一起来看看阿里架构师的十年架构路。",
      "author": {
        "nick": "olle",
        "homepage": "/u/olle"
      }
    },
    {
      "id": "1190000016748942",
      "title": " java基础——模版模式",
      "url": "/a/1190000016748942",
      "desc": "模版方法模式：定义一个操作中的算方框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法结构的情况下即可重新定义该算法的特定步骤。",
      "author": {
        "nick": "雨露",
        "homepage": "/u/yulu_5b175873aeaf9"
      }
    },
    {
      "id": "1190000016748746",
      "title": " java基础——简单工厂模式",
      "url": "/a/1190000016748746",
      "desc": "工厂模式的优点：1 良好的封装型，代码结构清晰，一个对象创建是有条件约束的，如果一个调用者需要一个具体的产品对象，只需要知道这个产品的类名就可以了，不用知道创建对象的艰辛过程，降低模块间的耦合性。",
      "author": {
        "nick": "雨露",
        "homepage": "/u/yulu_5b175873aeaf9"
      }
    },
    {
      "id": "1190000016748528",
      "title": "ABAP vs Java， 蛙泳 vs 自由泳",
      "url": "/a/1190000016748528",
      "desc": "ABAP和Java, 蛙泳和自由泳。前面的组合是Jerry用来挣钱养家的技术，后者是Jerry花了大量业余时间和金钱苦练的技能。或许有的朋友觉得这两组概念风马牛不相及，然而在Jerry眼中，ABAP之于Java, 相当于蛙泳之于自由...",
      "author": {
        "nick": "JerryWangSAP",
        "homepage": "/u/jerrywangsap"
      }
    },
    {
      "id": "1190000016747734",
      "title": "Java高并发架构设计",
      "url": "/a/1190000016747734",
      "desc": "为了让业务可以流畅的运行并且给用户一个好的交互体验，我们需要根据业务场景预估达到的并发量等因素，来设计适合自己业务场景的高并发处理方案。",
      "author": {
        "nick": "007大树将军",
        "homepage": "/u/javajiagoushi007"
      }
    },
    {
      "id": "1190000016747304",
      "title": "卡拉OK歌词原理和实现高仿Android网易云音乐",
      "url": "/a/1190000016747304",
      "desc": "大家好，我们是爱学啊，继上一篇讲解了【LRC歌词原理和实现高仿Android网易云音乐】，今天给大家带来一篇关于卡拉OK歌词原理和在Android上如何实现歌词逐字滚动的效果，本文来自【Android开发项目实战我的云音乐...",
      "author": {
        "nick": "爱学啊",
        "homepage": "/u/ixuea"
      }
    }
  ]
}