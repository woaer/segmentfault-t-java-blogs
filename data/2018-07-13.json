{
  "watchNum": "23919",
  "blogs": [
    {
      "id": "1190000015624198",
      "title": "注解、泛型、枚举、Lambda表达式",
      "url": "/a/1190000015624198",
      "desc": "注解是JDK1.5的特性，注解本质就是一个接口，需要继承Annotation接口，使用反射让其具有功能",
      "author": {
        "nick": "104828720",
        "homepage": "/u/104828720_582bfbf471440"
      }
    },
    {
      "id": "1190000015624065",
      "title": "android ＋ PHP 简单实现登录",
      "url": "/a/1190000015624065",
      "desc": "1，使用 安卓手机，或者模拟器2，服务器支持php3，简单验证登录操作4，网络请求使用RxEasyHttp开源库，是对okhttp3，retrofit的封装，直接使用okhttp3也是可以的5，测试登录使用的url一直有效6，需要服务器的，可...",
      "author": {
        "nick": "hosition",
        "homepage": "/u/hosition"
      }
    },
    {
      "id": "1190000015622465",
      "title": "Java知识点总结（反射-获取类的信息）",
      "url": "/a/1190000015622465",
      "desc": "Java知识点总结（反射-获取类的信息） @(Java知识点总结)[Java, 反射] 应用反射的API，获取类的信息(类的名字、属性、方法、构造器等) {代码...}",
      "author": {
        "nick": "苏生",
        "homepage": "/u/susheng_579d70745d3d3"
      }
    },
    {
      "id": "1190000015622411",
      "title": "出场率比较高的一道多线程安全面试题",
      "url": "/a/1190000015622411",
      "desc": "工作一两年的应该都知道 ArrayList 是线程不安全的，要使用线程安全的就使用 Vector，这也是各种 Java 面试宝典里面所提及的，可能很多工作好几年的程序员都停留在这个知识面上。",
      "author": {
        "nick": "Java技术栈",
        "homepage": "/u/javastack"
      }
    },
    {
      "id": "1190000015622207",
      "title": "代码中的人文故事：从一个Java的“Bug”说起",
      "url": "/a/1190000015622207",
      "desc": "这几日闲来无事撸代码，无意中发现一桩趣事。原以为是一个Java的bug，没想到经过一系列死磕，挖掘出了一段和中国历史乃至人类文明相关联的人文故事，不禁唏嘘感叹一番。",
      "author": {
        "nick": "风云信步",
        "homepage": "/u/bryansharp"
      }
    },
    {
      "id": "1190000015621231",
      "title": "为 github markdown 文件生成目录",
      "url": "/a/1190000015621231",
      "desc": "在编写 github 项目时，有时候会编写各种 README.md 等 markdown 文件，但是 github 默认是没有目录的。",
      "author": {
        "nick": "叶止水",
        "homepage": "/u/houbinbin"
      }
    },
    {
      "id": "1190000015620924",
      "title": "CentOS(linux) 下JDK的安装",
      "url": "/a/1190000015620924",
      "desc": "第一篇博客有不足之处，请大家多指教。^_^linux下装JDK的文章网上有一大堆我就不照搬了。本文讲新手如何取巧的在linux下安装JDK。",
      "author": {
        "nick": "司木",
        "homepage": "/u/evasimu"
      }
    },
    {
      "id": "1190000015620496",
      "title": "Java知识点总结（反射-介绍）",
      "url": "/a/1190000015620496",
      "desc": "程序在 运行状态中 ，可以动态加载一个只有名称的类 （动态调用类的所有属性和方法）Class c = Class.forName(\"com..test.User\");",
      "author": {
        "nick": "苏生",
        "homepage": "/u/susheng_579d70745d3d3"
      }
    },
    {
      "id": "1190000015619784",
      "title": "Java 多态（8）",
      "url": "/a/1190000015619784",
      "desc": "在面向对象的程序设计语言中，多态是继数据抽象和继承之后的第三种基本特征。 1.再论向上转型 多态作用：消除类型之间的耦合关系. 2.转机 绑定：将一个方法调用同一个方法主体关联起来. 前期绑定：在程序执行前就...",
      "author": {
        "nick": "Seasons20",
        "homepage": "/u/seasons20"
      }
    },
    {
      "id": "1190000015619595",
      "title": "【跃迁之路】【522天】程序员高效学习方法论探索系列（实验阶段279-2018.07.12）",
      "url": "/a/1190000015619595",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015619536",
      "title": "【跃迁之路】【522天】刻意练习系列281（2018.07.12）",
      "url": "/a/1190000015619536",
      "desc": "技术的精进不能只是简单的刷题，而应该是不断的“刻意”练习 该系列改版后正式纳入【跃迁之路】专栏，持续更新",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015619493",
      "title": "集合（一） -  ArrayList",
      "url": "/a/1190000015619493",
      "desc": "补充第二结论：若用有参构造器的方式实例化ArrayList且initialCapacity大于0，则既声明了数组，也分配了空间",
      "author": {
        "nick": "WuFeee",
        "homepage": "/u/wufeee"
      }
    },
    {
      "id": "1190000015616480",
      "title": "java锁优化策略",
      "url": "/a/1190000015616480",
      "desc": "要了解锁优化策略中的轻量级锁与偏向锁的原理和运作过程，需要先了解Hotspot虚拟机的对象头部分的内存布局。",
      "author": {
        "nick": "ls_cherish",
        "homepage": "/u/ls_cherish"
      }
    },
    {
      "id": "1190000015616071",
      "title": "String Data JPA 学习笔记",
      "url": "/a/1190000015616071",
      "desc": "首先来说JPA是一个持久化规范，也就是说当我们用jpa的时候我们不需要去选面向hibernate的api编程了，这样就大大降低了偶和度了",
      "author": {
        "nick": "Slimmer_那些年儿",
        "homepage": "/u/slimmer_naxienianer"
      }
    },
    {
      "id": "1190000015615963",
      "title": "Java知识点总结（注解-解析注解）",
      "url": "/a/1190000015615963",
      "desc": "Java知识点总结（注解-解析注解） @(Java知识点总结)[Java, 注解] 通过反射获取类、函数或成员上的运行时注解信息，从而实现动态控制程序运行的逻辑。 使用注解步骤： 定义注解 类中使用注解 解析注解 示例： {代...",
      "author": {
        "nick": "苏生",
        "homepage": "/u/susheng_579d70745d3d3"
      }
    }
  ]
}