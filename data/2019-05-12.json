{
  "watchNum": "50931",
  "blogs": [
    {
      "id": "1190000019149780",
      "title": "小程序图片上传 wx.uploadFile   后台java   PHP两个版本",
      "url": "/a/1190000019149780",
      "desc": "上传图片：前台选择图片并把临时地址上传后台，后台把图片上传至自己的服务器，以下是上传图片的方法，有后台是java的还有PHP的，如有疑问或不解，请留言。",
      "author": {
        "nick": "wlm123565",
        "homepage": "/u/wlm123565"
      }
    },
    {
      "id": "1190000019149745",
      "title": " 超级白中白的学习进程（2）：继承（Extends）",
      "url": "/a/1190000019149745",
      "desc": "继承（Extends）1、前言还是先说一下博主本人的一些基本情况吧。本人去年刚刚毕业，专业是电气工程及其自动化，就是在大学期间完全没有接触过JAVA，也就稍稍了解了一下C语言。后来找了现在的工作也是和编程没有任...",
      "author": {
        "nick": "ZHC_YTYQ",
        "homepage": "/u/zhc_ytyq"
      }
    },
    {
      "id": "1190000019149500",
      "title": "现代编程语言的值传递与引用传递",
      "url": "/a/1190000019149500",
      "desc": "现代编程语言对于值传递与引用传递的支持程度是比较不同的 首先介绍值传递与引用传递的概念 值传递 将变量a传递到其他的函数并对其更改，不能影响a的值 引用传递 在其他的作用域对传入的变量a的更改可以影响a的值...",
      "author": {
        "nick": "phiysng",
        "homepage": "/u/phiysng"
      }
    },
    {
      "id": "1190000019148767",
      "title": "力扣(LeetCode)133",
      "url": "/a/1190000019148767",
      "desc": "题目地址：[链接]题目描述：给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 val（Int） 和其邻居的列表（list[Node]）。",
      "author": {
        "nick": "Linus脱袜子",
        "homepage": "/u/qiuqi_turing"
      }
    },
    {
      "id": "1190000019148701",
      "title": "JAVA面试题(17)",
      "url": "/a/1190000019148701",
      "desc": "本文首发于cartoon的博客 JSP 有哪些内置对象？作用分别是什么？ request：客户端请求，包括get/post的参数 response：服务器端传回客户端的回应 pageContext：管理网页属性 session：存在于服务器端的客户端有关...",
      "author": {
        "nick": "cartoon",
        "homepage": "/u/cartoon_5cce2e0fb8fae"
      }
    },
    {
      "id": "1190000019148651",
      "title": "JAVA面试题(16)",
      "url": "/a/1190000019148651",
      "desc": "为什么要使用克隆？ 克隆对象可能包括已经修改过的属性，new出来的对象属性都还是初始化的值。 若直接利用指针指向原有对象，改变原对象的属性值时，指针所指对象的值也会改变 clone复制的对象与原对象是相互独立...",
      "author": {
        "nick": "cartoon",
        "homepage": "/u/cartoon_5cce2e0fb8fae"
      }
    },
    {
      "id": "1190000019148107",
      "title": "springcloud(二)——spring-cloud-alibaba集成sentinel入门",
      "url": "/a/1190000019148107",
      "desc": "随着微服务的流行，服务和服务之间的稳定性变得越来越重要。 Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。",
      "author": {
        "nick": "stone想静静",
        "homepage": "/u/zplxjj"
      }
    },
    {
      "id": "1190000019147609",
      "title": "[Java并发-7]java的线程小节",
      "url": "/a/1190000019147609",
      "desc": "在 Java 领域，实现并发程序的主要手段就是多线程。线程是操作系统里的一个概念，虽然各种不同的开发语言如 Java、C# 等都对其进行了封装，但原理和思路都是相同都。Java 语言里的线程本质上就是操作系统的线程，...",
      "author": {
        "nick": "df007df",
        "homepage": "/u/df007df"
      }
    },
    {
      "id": "1190000019147583",
      "title": "springboot结合全局异常处理之登录注册验证",
      "url": "/a/1190000019147583",
      "desc": "在学校做一个校企合作项目，注册登录这一块需要对注册登录进行输入合法的服务器端验证，因为是前后端分离开发，所以要求返回JSON数据。方法有很多，这觉得用全局异常处理比较容易上手",
      "author": {
        "nick": "醉卧美人膝",
        "homepage": "/u/panbingwen"
      }
    },
    {
      "id": "1190000019146433",
      "title": "JDK源码那些事儿之常用的ArrayList",
      "url": "/a/1190000019146433",
      "desc": "前面已经讲解集合中的HashMap并且也对其中使用的红黑树结构做了对应的说明，这次就来看下简单一些的另一个集合类，也是日常经常使用到的ArrayList，整体来说，算是比较好理解的集合了，一起来看下",
      "author": {
        "nick": "orange",
        "homepage": "/u/orange_5c808c5cc3ad2"
      }
    },
    {
      "id": "1190000019146043",
      "title": "i++和++i的区别",
      "url": "/a/1190000019146043",
      "desc": "但是牛客网的题打破了我的幻想， 如果按原先定义，就应该是i=i;i=i+1; 那么结果就应该是1；但是很遗憾结果是0；所以得知原先定义有误，至少是不准确的。 这个是为什么呢？",
      "author": {
        "nick": "旁观者z",
        "homepage": "/u/pangguanzhez"
      }
    },
    {
      "id": "1190000019145922",
      "title": "wait、notify实战之实现连接池",
      "url": "/a/1190000019145922",
      "desc": "在了解到wait、notify的使用方式之后，我们使用wait、notify来实现一个连接池。如果还有不清楚wait、notify使用的，请进入传送门：[链接]",
      "author": {
        "nick": "君莫笑",
        "homepage": "/u/jmxiao"
      }
    },
    {
      "id": "1190000019145698",
      "title": "ArrayList 线程安全性学习",
      "url": "/a/1190000019145698",
      "desc": "看了看，最近也没有好公司来办宣讲会，也就没了投简历的意向。最近看了看面试题，想着补一补基础，以后面几家Spring Cloud的企业，去和面试官交流交流。",
      "author": {
        "nick": "张喜硕",
        "homepage": "/u/zhangxishuo"
      }
    },
    {
      "id": "1190000019145086",
      "title": "java基础学习(试码) 变量类型理解",
      "url": "/a/1190000019145086",
      "desc": "大龄后学中年,热爱技术行业,自学思路分享理解,欢迎各位指正~ 1.变量类型 {代码...} {代码...} 局部变量特点: 局部变量声明在方法、构造方法或者语句块中； 局部变量在方法、构造方法、或者语句块被执行的时候创建...",
      "author": {
        "nick": "Mando",
        "homepage": "/u/mandodanny"
      }
    },
    {
      "id": "1190000019142580",
      "title": "3分钟干货之什么是线程安全",
      "url": "/a/1190000019142580",
      "desc": "1）不可变像String、Integer、Long这些，都是final类型的类，任何一个线程都改变不了它们的值，要改变除非新创建一个，因此这些不可变对象不需要任何同步手段就可以直接在多线程环境下使用",
      "author": {
        "nick": "巅峰大词典",
        "homepage": "/u/lingfeng23"
      }
    }
  ]
}