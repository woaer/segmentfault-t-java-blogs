{
  "watchNum": "52587",
  "blogs": [
    {
      "id": "1190000019303354",
      "title": "什么是面向对象？",
      "url": "/a/1190000019303354",
      "desc": "小白：Java是一门完全面向对象的编程语言！嗯？什么是面向过程？什么又是面向对象呢？大佬：在我们正式进入学习这部分前，了解一下面向过程和面向对象这两个概念，对于我们 接下来的学习有很大的好处。别急，下面...",
      "author": {
        "nick": "BWH_Steven",
        "homepage": "/u/bwh_steven"
      }
    },
    {
      "id": "1190000019302331",
      "title": "JVM 内存布局 ",
      "url": "/a/1190000019302331",
      "desc": "堆：存放实例对象以及数组对象，GC的主要区域。堆为对象分配内存的方法：碰撞指针和空闲列表。 访问对象：句柄和直接访问。",
      "author": {
        "nick": "Johnsontao",
        "homepage": "/u/johnsontao"
      }
    },
    {
      "id": "1190000019301997",
      "title": "做IT这几年，我整理了这些干货想要送给你!",
      "url": "/a/1190000019301997",
      "desc": "松哥接触过很多转行做开发的小伙伴，我了解到很多转行人的不容易，记得松哥大二时刚刚决定转行计算机，完全不知道这些东西到底应该怎么学，每天就是抱着书啃，书倒是读懂了，但是实在想不出来那些排序算法、水仙...",
      "author": {
        "nick": "江南一点雨",
        "homepage": "/u/lenve"
      }
    },
    {
      "id": "1190000019299633",
      "title": "JAVA面试题(35)",
      "url": "/a/1190000019299633",
      "desc": "本文首发于cartoon的博客    转载请注明出处:[链接] Redis 为什么是单线程的？ 参考博客户 [链接] Redis是基于内存的，瓶颈通常是内存大小以及带宽，与CPU没有太大联系 什么是缓存穿透？怎么解决？ 参考地址 [链...",
      "author": {
        "nick": "cartoon",
        "homepage": "/u/cartoon_5cce2e0fb8fae"
      }
    },
    {
      "id": "1190000019299214",
      "title": "网站架构",
      "url": "/a/1190000019299214",
      "desc": "{代码...} 初始阶段的网站架构 在初始阶段，访问量并不大，所以应用程序、数据库、文件等所有的资源都在一台服务器上。 2 应用服务和数据服务分离 随着业务的发展，就会发现一台服务器抗不过来了，所以将应用服务...",
      "author": {
        "nick": "无厘头",
        "homepage": "/u/wulitou"
      }
    },
    {
      "id": "1190000019299145",
      "title": "Fortune-Commons正式开源啦",
      "url": "/a/1190000019299145",
      "desc": "Fortune Commons 是笔者在工作以来的一些技术积累，虽然是很[低端]，但是对于Java入门或者初入Java开发的工作者来说，也是一个不错的学习资源，今天特地整合出来。",
      "author": {
        "nick": "landy8530",
        "homepage": "/u/landy8530"
      }
    },
    {
      "id": "1190000019298704",
      "title": "设计模式－－单例模式",
      "url": "/a/1190000019298704",
      "desc": "避免产生多个对象消耗过多的资源（比如该对象需要用到IO，Database等等），或者某个类的实例化对象应该只有一个的情况。",
      "author": {
        "nick": "一天八升水",
        "homepage": "/u/gxxxm"
      }
    },
    {
      "id": "1190000019297979",
      "title": "Java四种引用简介",
      "url": "/a/1190000019297979",
      "desc": "我们知道java相比C，C++中没有令人头痛的指针，但是却有和指针作用相似的引用对象（Reference），就是常说的引用，比如，Object obj = new Object()；这个obj就是引用，它指向的是真正的对象Object的地址，不过今...",
      "author": {
        "nick": "我想问问天",
        "homepage": "/u/wxwwt"
      }
    },
    {
      "id": "1190000019297870",
      "title": "Zookeeper 客户端 Api 的基本使用",
      "url": "/a/1190000019297870",
      "desc": "零 版本 JDK 版本 : OpenJDK 11.0.1 IDE : idea 2018.3 Zookeeper Server 版本 : 3.5.4-beta Zookeeper Client 版本 : 3.5.4-beta Curator 版本 : 4.2.0 一 Zookeeper Client Zookeeper Client 是 Zookeeper 的经...",
      "author": {
        "nick": "三流",
        "homepage": "/u/sanliu"
      }
    },
    {
      "id": "1190000019297867",
      "title": "[Java并发-11] 并发容器的使用",
      "url": "/a/1190000019297867",
      "desc": "Java 1.5 之前提供的同步容器虽然也能保证线程安全，但是性能很差，而 Java 1.5 版本之后提供的并发容器在性能方面则做了很多优化，并且容器的类型也更加丰富了。下面我们就对比二者来学习这部分的内容。",
      "author": {
        "nick": "df007df",
        "homepage": "/u/df007df"
      }
    },
    {
      "id": "1190000019297850",
      "title": "设计模式之UML类图",
      "url": "/a/1190000019297850",
      "desc": "类图(Class diagram)主要用于描述系统的结构化设计。类图也是最常用的UML图，用类图可以显示出类、接口以及它们之间的静态结构和关系。",
      "author": {
        "nick": "猿在天",
        "homepage": "/u/cos2a"
      }
    },
    {
      "id": "1190000019297762",
      "title": "网站的架构",
      "url": "/a/1190000019297762",
      "desc": "{代码...} 1.初始阶段的网站架构 在初始阶段，访问量并不大，所以应用程序、数据库、文件等所有的资源都在一台服务器上。 2 应用服务和数据服务分离 随着业务的发展，就会发现一台服务器抗不过来了，所以将应用服...",
      "author": {
        "nick": "无厘头",
        "homepage": "/u/wulitou"
      }
    },
    {
      "id": "1190000019297674",
      "title": "小说搜索站快速搭建：2.内容页解析",
      "url": "/a/1190000019297674",
      "desc": "三方框架 JSOUP okhttp 解析要素 翻章：上一章 翻章：下一章 目录 内容 表设计 {代码...} 解析代码 {代码...} 最终结果 难点 技术没有什么难点，难在日常的维护上。",
      "author": {
        "nick": "大肠杆菌",
        "homepage": "/u/dachangganjun_5ce8bf8be1e17"
      }
    },
    {
      "id": "1190000019297361",
      "title": "@Transactional回滚问题（try catch、嵌套）",
      "url": "/a/1190000019297361",
      "desc": "Spring 事务注解 @Transactional 本来可以保证原子性，如果事务内有报错的话，整个事务可以保证回滚，但是加上try catch或者事务嵌套，可能会导致事务回滚失败。测试一波。",
      "author": {
        "nick": "啤酒就辣条",
        "homepage": "/u/pijiujiulatiao"
      }
    },
    {
      "id": "1190000019296548",
      "title": "Java同步机制的底层实现",
      "url": "/a/1190000019296548",
      "desc": "在多线程编程中我们会遇到很多需要使用线程同步机制去解决的并发问题，而这些同步机制就是多线程编程中影响正确性和运行效率的重中之重。这不禁让我感到好奇，这些同步机制是如何实现的呢？好奇心是进步的源泉，...",
      "author": {
        "nick": "兜里有辣条",
        "homepage": "/u/juxingzhutou"
      }
    }
  ]
}