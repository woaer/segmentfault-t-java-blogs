{
  "watchNum": "47798",
  "blogs": [
    {
      "id": "1190000018871144",
      "title": "14.java 基本数据类型的包装类",
      "url": "/a/1190000018871144",
      "desc": "java在设计之初，有一个基本原则：一切皆对象。但是基本数据类型不是对象，不具备“对象”的特性——不携带属性、没有方法可调用。为了解决此类问题，Java为每种基本数据类型分别设计了对应的类，称之为包装类(Wrappe...",
      "author": {
        "nick": "shenlanzifa",
        "homepage": "/u/shenlanzifa"
      }
    },
    {
      "id": "1190000018870294",
      "title": "Spring Boot 2.x基础教程：工程结构推荐",
      "url": "/a/1190000018870294",
      "desc": "Spring Boot框架本身并没有对工程结构有特别的要求，但是按照最佳实践的工程结构可以帮助我们减少可能会遇见的坑，尤其是Spring包扫描机制的存在，如果您使用最佳实践的工程结构，可以免去不少特殊的配置工作。",
      "author": {
        "nick": "程序猿DD",
        "homepage": "/u/coderdd"
      }
    },
    {
      "id": "1190000018870108",
      "title": "从零单排Java 8（3） —— List结合Lambdas对排序的高级用法",
      "url": "/a/1190000018870108",
      "desc": "在本教程中，我们将首先了解Java 8中的Lambda支持，特别是如何利用它来编写Comparator并对Collection进行排序。",
      "author": {
        "nick": "william",
        "homepage": "/u/william_58539c0d63ef4"
      }
    },
    {
      "id": "1190000018869470",
      "title": "日期操作类DateFormat使用&&测试方法的使用",
      "url": "/a/1190000018869470",
      "desc": "可知format()方法把类似Mon Apr 15 11:24:32 CST 2019的日期格式格式化成为像：2019-04-15这样的文本格式。parse()反之，而且解析出来的是像Mon Apr 15 00:00:00 CST 2019这样的整点。",
      "author": {
        "nick": "Nirvana",
        "homepage": "/u/nirvana_5c73b14c8c902"
      }
    },
    {
      "id": "1190000018867399",
      "title": "MySQL 复制 - 性能与扩展性的基石 4：主备切换",
      "url": "/a/1190000018867399",
      "desc": "一旦使用 MySQL 的复制功能，就很大可能会碰到主备切换的情况。也许是为了迭代升级服务器，或者是主库出现问题时，将一台备库转换成主库，或者只是希望重新分配容量。不过出于什么原因，都需要将新主库的信息告诉...",
      "author": {
        "nick": "北国风光",
        "homepage": "/u/beiguofengguang"
      }
    },
    {
      "id": "1190000018867350",
      "title": "阿里Sentinel控制台源码修改-对接Apollo规则持久化",
      "url": "/a/1190000018867350",
      "desc": "前面我们讲解了如何对接Apollo来持久化限流的规则，对接后可以直接通过Apollo的后台进行规则的修改，推送到各个客户端实时生效。",
      "author": {
        "nick": "猿天地",
        "homepage": "/u/yuantiandi"
      }
    },
    {
      "id": "1190000018866103",
      "title": "springboot实战（一）",
      "url": "/a/1190000018866103",
      "desc": "最近在看《JavaEE开发的颠覆者 Spring Boot实战》，顺便写了一个小框架，在这里作为记录，供以后回顾",
      "author": {
        "nick": "lichking2019",
        "homepage": "/u/lichking2019"
      }
    },
    {
      "id": "1190000018865920",
      "title": "Android关于获取时间的记录",
      "url": "/a/1190000018865920",
      "desc": "1 timestamp2 date3 SimpleDateFormat4 Calendar5 Time",
      "author": {
        "nick": "PiscesYE",
        "homepage": "/u/piscesye"
      }
    },
    {
      "id": "1190000018864202",
      "title": "关于线程池你不得不知道的一些设置",
      "url": "/a/1190000018864202",
      "desc": "看完我上一篇文章「你都理解创建线程池的参数吗？」之后，当遇到这种问题，你觉得你完全能够唬住面试官了，50k轻松到手。殊不知，要是面试官此刻给你来个反杀：",
      "author": {
        "nick": "objcoding",
        "homepage": "/u/objcoding"
      }
    },
    {
      "id": "1190000018863868",
      "title": "5030-节点与其祖先之间的最大差值",
      "url": "/a/1190000018863868",
      "desc": "给定二叉树的根节点 root，找出存在于不同节点 A 和 B 之间的最大值 V，其中 V = |A.val - B.val|，且 A 是 B 的祖先。 （如果 A 的任何子节点之一为 B，或者 A 的任何子节点是 B 的祖先，那么我们认为 A 是 B 的...",
      "author": {
        "nick": "Null",
        "homepage": "/u/null_ryan"
      }
    },
    {
      "id": "1190000018863545",
      "title": "5024-除数博弈",
      "url": "/a/1190000018863545",
      "desc": "爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。 最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作： 选出任一 x，满足 0 < x < N 且 N % x == 0 。用 N - x 替换黑板上的数字...",
      "author": {
        "nick": "Null",
        "homepage": "/u/null_ryan"
      }
    },
    {
      "id": "1190000018862717",
      "title": "netty学习总结（一）",
      "url": "/a/1190000018862717",
      "desc": "使用Java IO进行网络编程，一般一个用户一个线程，无法处理海量用户使用Java NIO进行网络编程，编程复杂性太高，如果没有深厚的NIO网络编程基础，写出的程序可能还不如Java IO写的程序至于Java AIO，目前还没有弄...",
      "author": {
        "nick": "aozeliu",
        "homepage": "/u/aozeliu"
      }
    },
    {
      "id": "1190000018862699",
      "title": "工具集核心教程 | 第六篇： Freemarker模板引擎入门到进阶",
      "url": "/a/1190000018862699",
      "desc": "Freemarker 是一款模板引擎，是一种基于模版生成静态文件的通用 工具，它是为程序员提供的一个开发包，或者说是一个类库，它不是面向最终用户的，而是为程序员提供了一款可以嵌入他们开发产品的应用程序。  Freem...",
      "author": {
        "nick": "星缘",
        "homepage": "/u/xingyuan_59b0b68ebe448"
      }
    },
    {
      "id": "1190000018862687",
      "title": "工具集核心教程 | 第五篇： 利用Velocity模板引擎生成模板代码",
      "url": "/a/1190000018862687",
      "desc": "不知道大家有没有这样的感觉，在平时开发中，经常有很多dao、service类中存着很多重复的代码，Velocity提供了模板生成工具，今天我教大家怎么和这些大量的重复代码说再见。",
      "author": {
        "nick": "星缘",
        "homepage": "/u/xingyuan_59b0b68ebe448"
      }
    },
    {
      "id": "1190000018862666",
      "title": "工具集核心教程 | 第四篇： Velocity模板引擎入门到进阶",
      "url": "/a/1190000018862666",
      "desc": "Velocity是一个基于java的模板引擎（template engine）。它允许任何人仅仅简单的使用模板语言（template language）来引用由java代码定义的对象。 当Velocity应用于web开发时，界面设计人员可以和java程序开发人...",
      "author": {
        "nick": "星缘",
        "homepage": "/u/xingyuan_59b0b68ebe448"
      }
    }
  ]
}