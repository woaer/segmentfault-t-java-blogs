{
  "watchNum": "23783",
  "blogs": [
    {
      "id": "1190000015571773",
      "title": "java面试| 精选基础题(1)",
      "url": "/a/1190000015571773",
      "desc": "每天进步一点点,距离大腿又近一步！ 阅读本文大概需要9分钟以下题目是从面试经历和常考面试题中选出有点儿意思的题目，参考答案如有错误，请联系小编指正，感谢！",
      "author": {
        "nick": "java从心",
        "homepage": "/u/javacongxin"
      }
    },
    {
      "id": "1190000015568418",
      "title": "一次线上问题排查所引发的思考",
      "url": "/a/1190000015568418",
      "desc": "前言 之前或多或少分享过一些内存模型、对象创建之类的内容，其实大部分人看完都是懵懵懂懂，也不知道这些的实际意义。 直到有一天你会碰到线上奇奇怪怪的问题，如： 线程执行一个任务迟迟没有返回，应用假死。 ...",
      "author": {
        "nick": "crossoverJie",
        "homepage": "/u/crossoverjie"
      }
    },
    {
      "id": "1190000015568114",
      "title": "mac下安装JAVA开发工具(9)———maven的本地仓库安装jar包",
      "url": "/a/1190000015568114",
      "desc": "mac下安装JAVA开发工具(9)———maven的本地仓库安装jar包 1.下载jar包 常用Maven仓库网址： [链接] [链接] [链接] [链接] [链接] 2.下载jar包 以mysql8为例 {代码...} 3.安装到本地仓库 因为已经在settings.xml中配...",
      "author": {
        "nick": "source",
        "homepage": "/u/webyh"
      }
    },
    {
      "id": "1190000015568096",
      "title": "leetcode349. Intersection of Two Arrays",
      "url": "/a/1190000015568096",
      "desc": "思路一模仿了归并排序的merge部分。先将两个数组分别排序，排序完成之后再用两个指针分别比较两个数组的值。如果两个指针指向的值相同，则向结果集中添加该元素并且同时将两个指针向前推进。否则指向的值较小的那...",
      "author": {
        "nick": "raledong",
        "homepage": "/u/raledong"
      }
    },
    {
      "id": "1190000015567977",
      "title": "mac下安装JAVA开发工具(8)------maven ",
      "url": "/a/1190000015567977",
      "desc": "mac下安装JAVA开发工具(8)———maven 安装环境 mac 10.12.6 shell-> zsh 1.下载maven 官网下载地址 二进制包即可 apache-maven-3.5.4-bin.tar.gz 2.解压缩 解压缩到任意一个目录即可 要求:路径没有中文 没有空格...",
      "author": {
        "nick": "source",
        "homepage": "/u/webyh"
      }
    },
    {
      "id": "1190000015567891",
      "title": "GC_4_GC复制算法",
      "url": "/a/1190000015567891",
      "desc": "Copying GC是Marvin L.Minsky在1963年研究出来的算法。就是指把某个空间里的活动对象复制到其它空间，把原空间里的所有对象都回收掉。在此，将复制活动对象的原空间称为From空间，将粘贴活动对象的新空间称为To空...",
      "author": {
        "nick": "ShanXF",
        "homepage": "/u/shanxf"
      }
    },
    {
      "id": "1190000015567720",
      "title": "Java 事务详解",
      "url": "/a/1190000015567720",
      "desc": "(1)事务（Transaction），一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。",
      "author": {
        "nick": "TZLLOG",
        "homepage": "/u/tzllog"
      }
    },
    {
      "id": "1190000015567561",
      "title": "apidoc利用代码注释书写文档",
      "url": "/a/1190000015567561",
      "desc": "apidoc是一款利用源代码中注释来创建RESTful Web API文档的工具。apidoc可用于C＃，Go，Dart，Java，JavaScript，PHP，TypeScript和所有其他支持Javadoc的语言。",
      "author": {
        "nick": "Mr_houzi",
        "homepage": "/u/mr_houzi"
      }
    },
    {
      "id": "1190000015567432",
      "title": "【跃迁之路】【518天】程序员高效学习方法论探索系列（实验阶段275-2018.07.08）",
      "url": "/a/1190000015567432",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015567389",
      "title": "java nio中的select和channel是怎么使用的？",
      "url": "/a/1190000015567389",
      "desc": "线程在处理数据时，如果线程还处于将数据从channel读到buffer的这段时间内，线程可以去做别的事情，等数据都读到buffer了，线程再回来处理读到的数据",
      "author": {
        "nick": "爬蜥",
        "homepage": "/u/pa_5aeb229669d18"
      }
    },
    {
      "id": "1190000015567359",
      "title": "【跃迁之路】【518天】刻意练习系列277（2018.07.08）",
      "url": "/a/1190000015567359",
      "desc": "技术的精进不能只是简单的刷题，而应该是不断的“刻意”练习 该系列改版后正式纳入【跃迁之路】专栏，持续更新",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015566214",
      "title": "Java 访问权限控制（6）",
      "url": "/a/1190000015566214",
      "desc": "访问控制（或隐藏具体实现）与“最初的实现并不恰当”有关. 1.包 类库是一组类文件，其中每个文件都有一个public类，以及任意数量的非public类. 每个文件都有一个构件，如果希望这些构建从属于同一个群组，就可以使...",
      "author": {
        "nick": "Seasons20",
        "homepage": "/u/seasons20"
      }
    },
    {
      "id": "1190000015566120",
      "title": "理解字节序",
      "url": "/a/1190000015566120",
      "desc": "因为物理内存是以字节为单位进行数据存储，也就是我们常说的计算机基本单位为字节。因此，单字节的数据（如c或java的char类型的数据）没有字节序这一说，因为获取它只需要读取一个字节。而多字节数据，由于有多个...",
      "author": {
        "nick": "热爱产品码农贾维斯啊啊啊啊啊啊",
        "homepage": "/u/wjl"
      }
    },
    {
      "id": "1190000015565642",
      "title": "Spring Boot入门（13)自制音乐平台",
      "url": "/a/1190000015565642",
      "desc": "经过笔者这几天的辛勤劳作（其实就是苦逼地码代码），一个新的网站已经上线啦！该网站是用Spring Boot工具写的，主要实现的功能如下：",
      "author": {
        "nick": "jclian91",
        "homepage": "/u/jclian91"
      }
    },
    {
      "id": "1190000015565550",
      "title": "Spring Boot入门（12）实现页面访问量统计功能",
      "url": "/a/1190000015565550",
      "desc": "在日常的网站使用中，经常会碰到页面的访问量（或者访问者人数）统计。那么，在Spring Boot中该如何实现这个功能呢？  我们的想法是比较简单的，那就是将访问量储存在某个地方，要用的时候取出来即可，储存的位置...",
      "author": {
        "nick": "jclian91",
        "homepage": "/u/jclian91"
      }
    }
  ]
}