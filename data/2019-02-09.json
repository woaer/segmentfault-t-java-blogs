{
  "watchNum": "39476",
  "blogs": [
    {
      "id": "1190000018109949",
      "title": "JavaFX 学习笔记——窗口与控件",
      "url": "/a/1190000018109949",
      "desc": "如今比较流行的桌面gui框架有WPF、WinForm、Qt、javafx等。其中WPF和WinForm目前还只能在运行Winsows上。Qt(widget)是一个很强大的跨平台C++框架(不只是UI)，但用C++写界面实在有点蛋疼，且编译出来的体积很大。",
      "author": {
        "nick": "才才才",
        "homepage": "/u/caimy"
      }
    },
    {
      "id": "1190000018108932",
      "title": "spring cloud gateway  （5）其他 ",
      "url": "/a/1190000018108932",
      "desc": "1.对于限流，可以先看看ratelimit包里的几个类，gateway里可以定义自己的key，来确定哪些请求算同一个请求，如根据IP来计算，之后执行一次lua脚本来计算次数。因为没满足公司需求，所以我是自己加个限流过滤器实...",
      "author": {
        "nick": "弹肖邦の夜曲",
        "homepage": "/u/danxiaobangyequ"
      }
    },
    {
      "id": "1190000018108927",
      "title": "spring cloud gateway 源码解析（4）跨域问题处理",
      "url": "/a/1190000018108927",
      "desc": "现在项目大多开始前后端分离，前端开发的时候可以用webpack的proxytable来配置线上打包的话可以直接放到后台项目的静态资源目录了，这样就不会有跨域问题，或者放到nginx里在配置好资源目录就行，这些方案网上都...",
      "author": {
        "nick": "弹肖邦の夜曲",
        "homepage": "/u/danxiaobangyequ"
      }
    },
    {
      "id": "1190000018108924",
      "title": "spring cloud gateway 源码解析（3）记录请求参数及返回的json",
      "url": "/a/1190000018108924",
      "desc": "（1）一开始搜索读取参数的文章，方法大多是从body里读一次DataBuffer，转成字符串，然后再把字符串转成DataBuffer重新放到body里，如：[链接]",
      "author": {
        "nick": "弹肖邦の夜曲",
        "homepage": "/u/danxiaobangyequ"
      }
    },
    {
      "id": "1190000018108921",
      "title": "spring cloud gateway 源码解析（2）动态路由",
      "url": "/a/1190000018108921",
      "desc": "先看看gateway是怎么获取我们配置的路由：在gateway启动时，GatewayAutoConfiguration帮我们注册了一系列beans",
      "author": {
        "nick": "弹肖邦の夜曲",
        "homepage": "/u/danxiaobangyequ"
      }
    },
    {
      "id": "1190000018108918",
      "title": "spring cloud gateway 源码解析（1）整体流程 ",
      "url": "/a/1190000018108918",
      "desc": "公司要做自己的网关，于是先把github的issue过了一遍，然后把gateway源码在看了一遍，这样公司的需求就搞定了。包括动态路由，多纬度限流，记录请求参数及返回参数（也可修改）。先从请求进入网关说起吧： 请求先...",
      "author": {
        "nick": "弹肖邦の夜曲",
        "homepage": "/u/danxiaobangyequ"
      }
    },
    {
      "id": "1190000018108719",
      "title": "【跃迁之路】【718天】程序员高效学习方法论探索系列（实验阶段475-2019.2.8）",
      "url": "/a/1190000018108719",
      "desc": "从2017.10.6起，开启这个系列，目标只有一个：探索新的学习方法，实现跃迁式成长 实验期2年（2017.10.06 - 2019.10.06） 我将以自己为实验对象。 我将开源我的学习方法，方法不断更新迭代，全程记录分享 实验结束...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000018107945",
      "title": "1019 数字黑洞 （20 分）java",
      "url": "/a/1190000018107945",
      "desc": "给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 61...",
      "author": {
        "nick": "PangHuanTeng",
        "homepage": "/u/panghuanteng"
      }
    },
    {
      "id": "1190000018107011",
      "title": " 【跃迁之路】【717天】程序员高效学习方法论探索系列（实验阶段474-2019.2.7）",
      "url": "/a/1190000018107011",
      "desc": "从2017.10.6起，开启这个系列，目标只有一个：探索新的学习方法，实现跃迁式成长 实验期2年（2017.10.06 - 2019.10.06） 我将以自己为实验对象。 我将开源我的学习方法，方法不断更新迭代，全程记录分享 实验结束...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000018106746",
      "title": "Java面向对象及其三大特征",
      "url": "/a/1190000018106746",
      "desc": "面向对象，简单来说就是由动作的执行者变为动作的操控者。结合具体例子来说就是使用某个人或者工具所具有的功能而不用去管功能的具体实现方式。例如现实中的项目开发，老板想要实现某些功能，但是他自己不会这些...",
      "author": {
        "nick": "Java笔记录",
        "homepage": "/u/jcoffeezph"
      }
    },
    {
      "id": "1190000018106602",
      "title": "J2EE开发笔记（一）—— J2EE开发环境配置",
      "url": "/a/1190000018106602",
      "desc": "最近电脑重新装了系统，所有J2EE相关软件都需要重新安装配置，现将其中部分软件安装配置过程记录如下，方便参考查阅。tips：所有软件均可在官网免费下载，尽量不要使用第三方提供的软件包。",
      "author": {
        "nick": "秋梦尘",
        "homepage": "/u/qiumengchen"
      }
    },
    {
      "id": "1190000018105767",
      "title": "dubbo源码解析（三十八）集群——LoadBalance",
      "url": "/a/1190000018105767",
      "desc": "目标：介绍dubbo中集群的负载均衡，介绍dubbo-cluster下loadBalance包的源码。",
      "author": {
        "nick": "CrazyHzm",
        "homepage": "/u/mmmmm_592a5e72c8ea7"
      }
    },
    {
      "id": "1190000018104088",
      "title": "【跃迁之路】【716天】程序员高效学习方法论探索系列（实验阶段473-2019.2.6）",
      "url": "/a/1190000018104088",
      "desc": "从2017.10.6起，开启这个系列，目标只有一个：探索新的学习方法，实现跃迁式成长 实验期2年（2017.10.06 - 2019.10.06） 我将以自己为实验对象。 我将开源我的学习方法，方法不断更新迭代，全程记录分享 实验结束...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000018103282",
      "title": "批量任务体现多线程的威力！",
      "url": "/a/1190000018103282",
      "desc": "对于多线程的理解不是非常深刻，工作中用到多线程代码的机会也不多，前不久遇到了一个使用场景，通过编码实现后对于多线程的理解和应用有了更加深刻的理解。场景如下：现有给用户发送产品调研的需求，运营的同事...",
      "author": {
        "nick": "翎野君",
        "homepage": "/u/lingyejun"
      }
    },
    {
      "id": "1190000018102784",
      "title": "dubbo源码解析（三十七）集群——directory",
      "url": "/a/1190000018102784",
      "desc": "我在前面的文章中也提到了Directory可以看成是多个Invoker的集合，Directory 的用途是保存 Invoker，其实现类 RegistryDirectory 是一个动态服务目录，可感知注册中心配置的变化，它所持有的 Inovker 列表会随着...",
      "author": {
        "nick": "CrazyHzm",
        "homepage": "/u/mmmmm_592a5e72c8ea7"
      }
    }
  ]
}