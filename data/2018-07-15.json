{
  "watchNum": "23959",
  "blogs": [
    {
      "id": "1190000015639155",
      "title": "人力资源管理系统需求文档",
      "url": "/a/1190000015639155",
      "desc": "该系统的使用人员为系统管理员 注册和登录 前端：胡忠元 后端：梅勇杰 注册 登录 公司类型下拉 具体需求参见 tapd 主页 前端：张琴 后端：梅勇杰 成员管理 前端：张琴 后端：袁乙文 成员管理主界面 过滤页 过滤界...",
      "author": {
        "nick": "木木甫",
        "homepage": "/u/mumufu"
      }
    },
    {
      "id": "1190000015637380",
      "title": "【跃迁之路】【524天】程序员高效学习方法论探索系列（实验阶段281-2018.07.14）",
      "url": "/a/1190000015637380",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015637349",
      "title": "【跃迁之路】【524天】刻意练习系列283（2018.07.14）",
      "url": "/a/1190000015637349",
      "desc": "技术的精进不能只是简单的刷题，而应该是不断的“刻意”练习 该系列改版后正式纳入【跃迁之路】专栏，持续更新",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015637235",
      "title": "Java知识点总结（反射-反射操作泛型）",
      "url": "/a/1190000015637235",
      "desc": "Java采用泛型擦除的机制来引入泛型。Java中的泛型仅仅是给编译器javac使用的， 确保数据的安全性和免去强制类型转换的麻烦 。但是，__一旦编译完成，所有的和泛型有关的类型全部擦除__。",
      "author": {
        "nick": "苏生",
        "homepage": "/u/susheng_579d70745d3d3"
      }
    },
    {
      "id": "1190000015636200",
      "title": "Java 接口（9）",
      "url": "/a/1190000015636200",
      "desc": "接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法。 1.抽象类和抽象方法 抽象类，是普通的类与接口之间的一种中庸之道. 抽象方法：仅有声明而没有方法体. 抽象类：包含抽象方法的类.如果一个类包...",
      "author": {
        "nick": "Seasons20",
        "homepage": "/u/seasons20"
      }
    },
    {
      "id": "1190000015635459",
      "title": "leetcode 49 Group Anagrams",
      "url": "/a/1190000015635459",
      "desc": "Given an array of strings, group anagrams together.题目要求输入一个字符串数组，我们要将由同样字母组成的字符串整理到一起，然后以如下例子中的格式输出。不需要关注输出的顺序，所有的输入都是小写。Exampl...",
      "author": {
        "nick": "soleil阿璐",
        "homepage": "/u/soleila"
      }
    },
    {
      "id": "1190000015635225",
      "title": "Java定时器之Timer学习一",
      "url": "/a/1190000015635225",
      "desc": "有且仅有一个后台线程对多个业务进行定时定频的调度。Timer 类可以保证多个线程可以共享单个 Timer 对象而无需进行外部同步，所以 Timer 类是线程安全的。",
      "author": {
        "nick": "Wayfreem",
        "homepage": "/u/wayfreem"
      }
    },
    {
      "id": "1190000015634321",
      "title": "fastjson转换json时，碰到的那些首字母大小写转换的坑！",
      "url": "/a/1190000015634321",
      "desc": "某年某月的某一天，本汪在某个奇葩的公司，接手了某个奇葩的项目，遇到了一些奇葩的事情，就掉进关于fastjson做bean to json转换时，那些关于首字符大小写的坑。",
      "author": {
        "nick": "agamem",
        "homepage": "/u/agamem"
      }
    },
    {
      "id": "1190000015632107",
      "title": "设计模式——观察者模式",
      "url": "/a/1190000015632107",
      "desc": "观察者模式(Observer)是行为型模式的一种，它定义了对象之间一种一对多的依赖关系，当一个对象发生改变时，依赖它的所有对象会被通知并且自动更新，它符合对象之间松耦合的设计原则。",
      "author": {
        "nick": "Jacob",
        "homepage": "/u/jacob93"
      }
    },
    {
      "id": "1190000015631344",
      "title": "源码|jdk源码之HashMap分析(一)",
      "url": "/a/1190000015631344",
      "desc": "hash表是应用最广泛的数据结构，是对键值对数据结构的一种重要实现。 它能够将关键字key映射到内存中的某一位置，查询和插入都能达到平均时间复杂度为O(1)的性能。 HashMap是java对hash表的实现，它是非线程安全...",
      "author": {
        "nick": "frapples",
        "homepage": "/u/frapples"
      }
    },
    {
      "id": "1190000015631016",
      "title": "【跃迁之路】【523天】程序员高效学习方法论探索系列（实验阶段280-2018.07.13）",
      "url": "/a/1190000015631016",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015630970",
      "title": "【跃迁之路】【523天】刻意练习系列282（2018.07.13）",
      "url": "/a/1190000015630970",
      "desc": "技术的精进不能只是简单的刷题，而应该是不断的“刻意”练习 该系列改版后正式纳入【跃迁之路】专栏，持续更新",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015630862",
      "title": "vue+Java 前后端分离，多次请求Session不一致的问题",
      "url": "/a/1190000015630862",
      "desc": "方法中有一行if( \"OPTIONS\".equals(request.getMethod())) 的判断，是因为我在做图片上传时，登录认证会失效导致跳转到登录页。后来发现原因是在做图片上传时，会在POST请求之前，先发送一个OPTION的预请求，这个...",
      "author": {
        "nick": "瓦力",
        "homepage": "/u/wallee"
      }
    },
    {
      "id": "1190000015630489",
      "title": "Java知识点总结（反射-反射机制性能问题）",
      "url": "/a/1190000015630489",
      "desc": "启用和禁用访问安全检查的开关,值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查。值为 false 则指示反射的对象应该实施 Java 语言访问检查。__并不是为true就能访问为false就不能访问__。",
      "author": {
        "nick": "苏生",
        "homepage": "/u/susheng_579d70745d3d3"
      }
    },
    {
      "id": "1190000015627737",
      "title": "【接口管理平台】eoLinker AMS 专业版 V3.5 ：加入数据结构管理、通用函数管理、API快速测试等近30项更新",
      "url": "/a/1190000015627737",
      "desc": "AMS PRO V3.5版本带来了以下几项更新内容： 更多更新内容请前往eoLinker博客，本文转自eoLinker博客。 官方网站：[链接]",
      "author": {
        "nick": "eoLinker",
        "homepage": "/u/eolinker"
      }
    }
  ]
}