{
  "watchNum": "42079",
  "blogs": [
    {
      "id": "1190000018352867",
      "title": "Flutter终将逆袭！1.2版本发布，或将统一江湖",
      "url": "/a/1190000018352867",
      "desc": "在去年 MWC 大展上发布首个 Beta 版后，Flutter 1.0 正式版于 2018 年 12 月召开的 Flutter Live 2018 上正式发布。今天在巴塞罗那召开的 MWC 发布会上，Google 正式发布了 Flutter 跨平台 UI 框架的 1.2 版本。...",
      "author": {
        "nick": "爱编码的coder",
        "homepage": "/u/chengxuyuanxiaohui"
      }
    },
    {
      "id": "1190000018352674",
      "title": "6.java 代码块",
      "url": "/a/1190000018352674",
      "desc": "代码块 在java中用{}括起来的称为代码块，代码块可分为以下四种: 普通代码块 构造代码块 静态代码块 同步代码块 普通代码块 在方法或语句中出现的{}就称为普通代码块。普通代码块和一般语句的执行顺序由他们在代...",
      "author": {
        "nick": "shenlanzifa",
        "homepage": "/u/shenlanzifa"
      }
    },
    {
      "id": "1190000018352651",
      "title": "5.java String对象",
      "url": "/a/1190000018352651",
      "desc": "字符串广泛应用 在Java 编程中，在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。",
      "author": {
        "nick": "shenlanzifa",
        "homepage": "/u/shenlanzifa"
      }
    },
    {
      "id": "1190000018352263",
      "title": "一次面试总结(记录)",
      "url": "/a/1190000018352263",
      "desc": "1,从一个数组里找重复出现次数最多的一个数？2,常用的linux命令3.垃圾收集器有哪些 ？垃圾收集算法？4,线上服务器变慢了你是如何定位问题并处理的？5,你自己实现一个本地缓存,淘汰最久未使用,你怎么设计6,用栈实...",
      "author": {
        "nick": "匿名小板凳",
        "homepage": "/u/nimingxiaobandeng"
      }
    },
    {
      "id": "1190000018351964",
      "title": "Java虚拟机规范（目录）",
      "url": "/a/1190000018351964",
      "desc": "Java虚拟机规范 Java SE 11 Edition 介绍 Java虚拟机介绍 Java虚拟机的结构 class文件格式 数据类型 原始类型和值 引用类型和值 运行时数据区 帧 对象的表示 浮点算术 特殊方法 异常 指令集汇总 类库 公有设计，...",
      "author": {
        "nick": "博弈",
        "homepage": "/u/lfheart"
      }
    },
    {
      "id": "1190000018351945",
      "title": "Java虚拟机规范（介绍）",
      "url": "/a/1190000018351945",
      "desc": "Java®编程语言是一种通用的、并发的、面向对象的语言，它的语法类似于C和C++，但它省略了许多使C和C++复杂、混乱和不安全的特性。最初开发Java平台是为了解决为联网的消费者设备构建软件的问题，它旨在支持多种主...",
      "author": {
        "nick": "博弈",
        "homepage": "/u/lfheart"
      }
    },
    {
      "id": "1190000018351922",
      "title": "java: final",
      "url": "/a/1190000018351922",
      "desc": "该引用类型变量不能再指向其它对象,即所指向的地址值不能发生变化.但,该对象所包含的内容可以发生改变.",
      "author": {
        "nick": "idealcn",
        "homepage": "/u/idealcn"
      }
    },
    {
      "id": "1190000018350964",
      "title": "java分页算法",
      "url": "/a/1190000018350964",
      "desc": "Java常用分页计算 方法1 {代码...} 方法2 {代码...} 方法3 {代码...}",
      "author": {
        "nick": "morata",
        "homepage": "/u/morata"
      }
    },
    {
      "id": "1190000018350746",
      "title": "Java动态追踪技术探究",
      "url": "/a/1190000018350746",
      "desc": "在遥远的希艾斯星球爪哇国塞沃城中，两名年轻的程序员正在为一件事情苦恼，程序出问题了，一时看不出问题出在哪里，于是有了以下对话：",
      "author": {
        "nick": "美团技术团队",
        "homepage": "/u/meituanjishutuandui"
      }
    },
    {
      "id": "1190000018348934",
      "title": "LeetCode-数组-删除有序数组重复元素",
      "url": "/a/1190000018348934",
      "desc": "题目描述 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 {代...",
      "author": {
        "nick": "断风雨",
        "homepage": "/u/duanfengyu"
      }
    },
    {
      "id": "1190000018347722",
      "title": "一致性 Hash 算法的实际应用",
      "url": "/a/1190000018347722",
      "desc": "但没有实际实现一个这样的算法，毕竟要加深印象还得自己撸一遍，于是本次就当前的一个路由需求来着手实现一次。",
      "author": {
        "nick": "crossoverJie",
        "homepage": "/u/crossoverjie"
      }
    },
    {
      "id": "1190000018347270",
      "title": " Blink 真香",
      "url": "/a/1190000018347270",
      "desc": "Blink 开源了有一段时间了，竟然没发现有人写相关的博客，其实我已经在我的知识星球里开始写了，今天来看看 Blink 为什么香？",
      "author": {
        "nick": "zhisheng",
        "homepage": "/u/zhisheng"
      }
    },
    {
      "id": "1190000018347377",
      "title": "SpringBoot 实战 (十三) | 整合 MyBatis (XML 版)",
      "url": "/a/1190000018347377",
      "desc": "如题，今天介绍 SpringBoot 与 Mybatis 的整合以及 Mybatis 的使用，之前介绍过了 SpringBoot 整合MyBatis 注解版的使用，上一篇介绍过 MyBatis 的理论，今天这篇就不介绍 MyBatis 的理论了，有兴趣的跳转阅读：S...",
      "author": {
        "nick": "一个优秀的废人",
        "homepage": "/u/nasus"
      }
    },
    {
      "id": "1190000018346507",
      "title": "实习面试笔记",
      "url": "/a/1190000018346507",
      "desc": "个人网站后端使用了 Flask 框架，数据库使用的是 Python 自带的 sqlite 前端使用 Vue.js + BootStrape4 首页类似 RSS, 集合了 readhub 和 36kr 的新闻资讯 另外，用户登录后可以在博客页发表和修改文章",
      "author": {
        "nick": "FrozenMap",
        "homepage": "/u/frozenmap"
      }
    },
    {
      "id": "1190000018346102",
      "title": "Alain 菜单权限控制",
      "url": "/a/1190000018346102",
      "desc": "问题描述 动态菜单管理，用户对应角色，角色对应菜单。 为用户进行设置角色，登陆系统后，用户可使用其拥有角色对应的所有菜单。 功能实现很简单，这里就不进行代码的讲解了，直接讲一下我所实现的思路。 实现 原...",
      "author": {
        "nick": "张喜硕",
        "homepage": "/u/zhangxishuo"
      }
    }
  ]
}