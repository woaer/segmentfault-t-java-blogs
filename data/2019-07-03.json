{
  "watchNum": "56653",
  "blogs": [
    {
      "id": "1190000019653600",
      "title": "一个关于ollie的论文解读，论文目的在于知识图谱三元组提取",
      "url": "/a/1190000019653600",
      "desc": "前言：模型作用为提取三元组，基于英文，目前尝试改为中文。论文题目名称叫《Open Language Learning for Information Extraction》,代码地址：[链接]",
      "author": {
        "nick": "胡杨",
        "homepage": "/u/huyang_5c370e87b9de9"
      }
    },
    {
      "id": "1190000019652397",
      "title": "JVM与GC（一）",
      "url": "/a/1190000019652397",
      "desc": "程序计数器（Program Counter Register）：线程私有，存储每个线程的JVM指令，不存储native方法内容。方法报错的时候异常栈能告诉在代码的哪一行，就是程序计数器的功能。",
      "author": {
        "nick": "Wish大人",
        "homepage": "/u/wishdaren_5c243b920a3eb"
      }
    },
    {
      "id": "1190000019651837",
      "title": "如何进入大数据领域，学习路线是什么？",
      "url": "/a/1190000019651837",
      "desc": "小白如何学习大数据技术？大数据怎么入门？大数据的应用前景等等问题，已成为热门大数据领域热门问题，今天小编就来为大家具体解答一下关于大数据学习的相关问题。",
      "author": {
        "nick": "一起学习大数据",
        "homepage": "/u/yiqixuexidashuju"
      }
    },
    {
      "id": "1190000019635682",
      "title": "揭秘变量提升",
      "url": "/a/1190000019635682",
      "desc": "变量提升是一个陈旧且令人困惑的术语。甚至在 ES6之前：变量提升的意思究竟是“提升至当前作用域顶部”还是“从嵌套的代码块中提升到最近的函数或脚本作用域中”？还是两者都有？",
      "author": {
        "nick": "前端小智",
        "homepage": "/u/minnanitkong"
      }
    },
    {
      "id": "1190000019647776",
      "title": "Cron 表达式",
      "url": "/a/1190000019647776",
      "desc": "cron 的表达式是字符串，实际上是由七子表达式（从左到右），描述个别细节的时间表。这些子表达式是分开的空白。",
      "author": {
        "nick": "云舒",
        "homepage": "/u/nulltommy"
      }
    },
    {
      "id": "1190000019646814",
      "title": "java并发编程学习之三种线程启动方式",
      "url": "/a/1190000019646814",
      "desc": "类Thread {代码...} 运行结果如下： 接口Runnable {代码...} 运行结果如下： 接口Callable {代码...} 运行结果如下： 接口Runnable和接口Callable的区别 Callable可以有返回值。 通过FutureTask包装成Runnable，...",
      "author": {
        "nick": "大军",
        "homepage": "/u/dajun_5d13288738ab7"
      }
    },
    {
      "id": "1190000019646408",
      "title": "可变参数",
      "url": "/a/1190000019646408",
      "desc": "package com.itheima.demo04.VarArgs;/* {代码...} */public class Demo01VarArgs { {代码...} }",
      "author": {
        "nick": "赵志强",
        "homepage": "/u/zhaozhiqiang_5b0d18d515218"
      }
    },
    {
      "id": "1190000019646365",
      "title": "乐字节Java变量与数据结构之一：Java编程规范、关键字和标识符",
      "url": "/a/1190000019646365",
      "desc": "大家好，我是乐字节的小乐，这次要给大家带来的是Java变量与数据类型。本文是第一集：Java编程规范，关键字与标识符。",
      "author": {
        "nick": "乐字节",
        "homepage": "/u/lezijie"
      }
    },
    {
      "id": "1190000019646230",
      "title": "java并发编程学习之基础概念",
      "url": "/a/1190000019646230",
      "desc": "线程：线程作为独立运行和独立调度的基本单位。由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统内多个程序间并发执行的程度。",
      "author": {
        "nick": "大军",
        "homepage": "/u/dajun_5d13288738ab7"
      }
    },
    {
      "id": "1190000019626006",
      "title": "JVM 栈(stack)溢出案例",
      "url": "/a/1190000019626006",
      "desc": "当启动一个新线程时，JVM就会给这个线程分配一个Java栈（这个栈的内存大小由-Xss参数来设置）。",
      "author": {
        "nick": "Developer",
        "homepage": "/u/song_song"
      }
    },
    {
      "id": "1190000019645571",
      "title": "重入锁最重要的几个方法",
      "url": "/a/1190000019645571",
      "desc": "这几个方法都是 Lock 接口中定义的：1）lock()获取锁，有以下三种情况：锁空闲：直接获取锁并返回，同时设置锁持有者数量为：1；当前线程持有锁：直接获取锁并返回，同时锁持有者数量递增1；其他线程持有锁：当前...",
      "author": {
        "nick": "巅峰大词典",
        "homepage": "/u/lingfeng23"
      }
    },
    {
      "id": "1190000019643735",
      "title": "Java中的注解是怎样工作的",
      "url": "/a/1190000019643735",
      "desc": "用一个词就可以描述注解，那就是元数据，即一种描述数据的数据。所以，可以说注解就是源代码的元数据。比如，下面这段代码：",
      "author": {
        "nick": "上五楼的快活",
        "homepage": "/u/xuantianzhanlingjian"
      }
    },
    {
      "id": "1190000019643634",
      "title": "Kotlin可空性探索",
      "url": "/a/1190000019643634",
      "desc": "目录介绍 01.可空性 02.安全调用运算符：?. 03.Elvis运算符：?: 04.安全转换运算符：as? 05.非空断言：!! 06.let函数说明 07.可空类型的扩展 08.Java中判断方式 09.kotlin是否解决NPE 10.kotlin如何约束非空判断 ...",
      "author": {
        "nick": "杨充",
        "homepage": "/u/xiangjianyu"
      }
    },
    {
      "id": "1190000019643417",
      "title": "GET，POST与后端接口详记",
      "url": "/a/1190000019643417",
      "desc": "在HTTP通信中主要分为GET和POST。如PUT，DELETE是类POST的传输方式，与POST没有实质区别。OPTION是查看服务器支持的请求方法。HEAD是测试服务器的该资源情况，不返回实体的主体部分。TRACE请求可以获取回服务器接...",
      "author": {
        "nick": "赵栩彬",
        "homepage": "/u/crabapple"
      }
    },
    {
      "id": "1190000019643186",
      "title": "多线程学习笔记（1）：volatile和synchronized",
      "url": "/a/1190000019643186",
      "desc": "所谓原子性操作就是指这些操作是不可中断的，要么执行过程中不被中断，要么不做。在Java中对基本数据类型的读取和赋值操作是原子性操作，比如i++就不是原子性操作，分为三步：读取i，i++，写回。",
      "author": {
        "nick": "hushucheng",
        "homepage": "/u/hushucheng"
      }
    }
  ]
}