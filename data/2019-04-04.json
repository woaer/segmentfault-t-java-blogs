{
  "watchNum": "46671",
  "blogs": [
    {
      "id": "1190000018763352",
      "title": "ApiBoot - ApiBoot Security Oauth 依赖使用文档",
      "url": "/a/1190000018763352",
      "desc": "ApiBoot是一款基于SpringBoot1.x，2.x的接口服务集成基础框架， 内部提供了框架的封装集成、使用扩展、自动化完成配置，让接口开发者可以选着性完成开箱即用， 不再为搭建接口框架而犯愁，从而极大的提高开发效率。",
      "author": {
        "nick": "恒宇少年",
        "homepage": "/u/hengyushaonian"
      }
    },
    {
      "id": "1190000018763319",
      "title": "ApiBoot - ApiBoot Swagger 使用文档",
      "url": "/a/1190000018763319",
      "desc": "ApiBoot是一款基于SpringBoot1.x，2.x的接口服务集成基础框架， 内部提供了框架的封装集成、使用扩展、自动化完成配置，让接口开发者可以选着性完成开箱即用， 不再为搭建接口框架而犯愁，从而极大的提高开发效率。",
      "author": {
        "nick": "恒宇少年",
        "homepage": "/u/hengyushaonian"
      }
    },
    {
      "id": "1190000018763301",
      "title": "ApiBoot - ApiBoot Http Converter 使用文档",
      "url": "/a/1190000018763301",
      "desc": "ApiBoot是一款基于SpringBoot1.x，2.x的接口服务集成基础框架， 内部提供了框架的封装集成、使用扩展、自动化完成配置，让接口开发者可以选着性完成开箱即用， 不再为搭建接口框架而犯愁，从而极大的提高开发效率。",
      "author": {
        "nick": "恒宇少年",
        "homepage": "/u/hengyushaonian"
      }
    },
    {
      "id": "1190000018763283",
      "title": "ApiBoot - ApiBoot Alibaba Oss 使用文档",
      "url": "/a/1190000018763283",
      "desc": "ApiBoot是一款基于SpringBoot1.x，2.x的接口服务集成基础框架， 内部提供了框架的封装集成、使用扩展、自动化完成配置，让接口开发者可以选着性完成开箱即用， 不再为搭建接口框架而犯愁，从而极大的提高开发效率。",
      "author": {
        "nick": "恒宇少年",
        "homepage": "/u/hengyushaonian"
      }
    },
    {
      "id": "1190000018763251",
      "title": "ApiBoot - ApiBoot Alibaba Sms 使用文档",
      "url": "/a/1190000018763251",
      "desc": "ApiBoot是一款基于SpringBoot1.x，2.x的接口服务集成基础框架， 内部提供了框架的封装集成、使用扩展、自动化完成配置，让接口开发者可以选着性完成开箱即用， 不再为搭建接口框架而犯愁，从而极大的提高开发效率。",
      "author": {
        "nick": "恒宇少年",
        "homepage": "/u/hengyushaonian"
      }
    },
    {
      "id": "1190000018763224",
      "title": "ApiBoot - ApiBoot Quartz 使用文档",
      "url": "/a/1190000018763224",
      "desc": "ApiBoot内部集成了Quartz，提供了数据库方式、内存方式的进行任务的存储，其中数据库方式提供了分布式集群任务调度，任务自动平滑切换执行节点。",
      "author": {
        "nick": "恒宇少年",
        "homepage": "/u/hengyushaonian"
      }
    },
    {
      "id": "1190000018762687",
      "title": "ApiBoot DataSource Switch 使用文档",
      "url": "/a/1190000018762687",
      "desc": "ApiBoot是一款基于SpringBoot1.x，2.x的接口服务集成基础框架， 内部提供了框架的封装集成、使用扩展、自动化完成配置，让接口开发者可以选着性完成开箱即用， 不再为搭建接口框架而犯愁，从而极大的提高开发效率。",
      "author": {
        "nick": "恒宇少年",
        "homepage": "/u/hengyushaonian"
      }
    },
    {
      "id": "1190000018761904",
      "title": "HashMap的实现原理笔记",
      "url": "/a/1190000018761904",
      "desc": "HashMap是Java中常用的Map接口的实现类，因为在日常工作中非常频繁的出现，所以在大部分的Java面试中都会问几个关于HashMap的问题。掌握HashMap的实现原理，已经是Java程序员的基础操作了。",
      "author": {
        "nick": "Yuicon",
        "homepage": "/u/yuicon"
      }
    },
    {
      "id": "1190000018759687",
      "title": "SpringBoot | 自动配置原理",
      "url": "/a/1190000018759687",
      "desc": "这个月过去两天了，这篇文章才跟大家见面，最近比较累，大家见谅下。下班后闲着无聊看了下 SpringBoot 中的自动配置，把我的理解跟大家说下。",
      "author": {
        "nick": "一个优秀的废人",
        "homepage": "/u/nasus"
      }
    },
    {
      "id": "1190000018758799",
      "title": "多线程批量数据导入示例——基础版",
      "url": "/a/1190000018758799",
      "desc": "以上的场景有一个共性，这类数据导入的场景简单来说就是将数据从一个数据源移动到另外一个数据源，而其中必定可以分为两步",
      "author": {
        "nick": "Null",
        "homepage": "/u/null_ryan"
      }
    },
    {
      "id": "1190000018758224",
      "title": "如何永久激活(破解) IntelliJ IDEA 2019.1",
      "url": "/a/1190000018758224",
      "desc": "之前写过一篇 如何永久激活(破解) IntelliJ IDEA 2018.1.3，很多同学说 2019 新款的不能用了，于是我又找到了另外一种方式。且看。",
      "author": {
        "nick": "志哥的成长笔记",
        "homepage": "/u/zhige_me"
      }
    },
    {
      "id": "1190000018758205",
      "title": "Java ThreadPoolExecutor 线程池",
      "url": "/a/1190000018758205",
      "desc": "从上图中也可以看出, Executors的创建线程池的方法, 创建出来的线程池都实现了 ExecutorService接口. 常用方法有以下几个:",
      "author": {
        "nick": "sc_ik",
        "homepage": "/u/sc_ik"
      }
    },
    {
      "id": "1190000018757621",
      "title": "文件上传",
      "url": "/a/1190000018757621",
      "desc": "[TOC] 示例一： 【1】页面js： {代码...} 【2】spring mvc后台接收多文件： {代码...} 示例二： layui图片上传 【1】单张 {代码...} 【2】多张 参考文章路径：[链接] 示例三 【1】oss上传图片 {代码...}",
      "author": {
        "nick": "学问思辨行",
        "homepage": "/u/xuewensibianxing"
      }
    },
    {
      "id": "1190000018756864",
      "title": "什么是面向切面编程AOP",
      "url": "/a/1190000018756864",
      "desc": "看过一些描述关于AOP切面编程的文章，写的太概念化让人很难理解，下面是我自己的理解，希望能帮到新人，如有错误欢迎指正。",
      "author": {
        "nick": "本人秃顶程序员",
        "homepage": "/u/benrentudingchengxuyuan"
      }
    },
    {
      "id": "1190000018755486",
      "title": "Java8的CompletableFuture进阶之道",
      "url": "/a/1190000018755486",
      "desc": "作为Java 8 Concurrency API改进而引入，本文是CompletableFuture类的功能和用例的介绍。同时在Java 9 也有对CompletableFuture有一些改进，之后再进入讲解。",
      "author": {
        "nick": "william",
        "homepage": "/u/william_58539c0d63ef4"
      }
    }
  ]
}