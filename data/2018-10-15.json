{
  "watchNum": "29963",
  "blogs": [
    {
      "id": "1190000016685030",
      "title": "Java小细节：List可以add(null)吗？",
      "url": "/a/1190000016685030",
      "desc": "遍历的时候，是否需要对每个元素判空？换句话说，List是否可以允许add null。然后我实验了一下，发现竟然是可以的。（我之前的理解是不可以，add null可能会没有发生任何事情）",
      "author": {
        "nick": "Kross",
        "homepage": "/u/kross"
      }
    },
    {
      "id": "1190000016684788",
      "title": "利用VisualVm和JMX远程监控K8S里的Java进程",
      "url": "/a/1190000016684788",
      "desc": "在利用VisualVm和JMX远程监控Java进程和VisualVm利用SSL连接JMX的方法里介绍了如何使用VisualVm+JMX监控远程Java进程的方法。那么如何监控一个运行在K8S集群中的Java进程呢？其实大致方法也是类似的。",
      "author": {
        "nick": "chanjarster",
        "homepage": "/u/chanjarster"
      }
    },
    {
      "id": "1190000016674584",
      "title": "二叉树的前序，中序，后序遍历方法总结",
      "url": "/a/1190000016674584",
      "desc": "二叉树的前序遍历，中序遍历，后序遍历是面试中常常考察的基本算法，关于它的概念这里不再赘述了，还不了解的同学可以去翻翻LeetCode的解释。",
      "author": {
        "nick": "ChiuCheng",
        "homepage": "/u/chiucheng"
      }
    },
    {
      "id": "1190000016679286",
      "title": "Dubbo 源码分析 - 自适应拓展原理",
      "url": "/a/1190000016679286",
      "desc": "我在上一篇文章中分析了 Dubbo 的 SPI 机制，Dubbo SPI 是 Dubbo 框架的核心。Dubbo 中的很多拓展都是通过 SPI 机制进行加载的，比如 Protocol、Cluster、LoadBalance 等。有时，有些拓展并非想在框架启动阶段被...",
      "author": {
        "nick": "coolblog",
        "homepage": "/u/coolblog"
      }
    },
    {
      "id": "1190000016680201",
      "title": "分享几个 SpringBoot 实用的小技巧",
      "url": "/a/1190000016680201",
      "desc": "最近分享的一些源码、框架设计的东西。我发现大家热情不是特别高，想想大多数应该还是正儿八经写代码的居多；这次就分享一点接地气的： SpringBoot 使用中的一些小技巧。",
      "author": {
        "nick": "crossoverJie",
        "homepage": "/u/crossoverjie"
      }
    },
    {
      "id": "1190000016679996",
      "title": " 设计模式之蝉——代理模式下",
      "url": "/a/1190000016679996",
      "desc": "动态代理 1 普通的动态代理（1）Subject抽象主题角色： （2）RealSubject具体主题角色： （3）Proxy代理主题角色： （4）业务场景 （5）打印日志 2 AOP模式的前置通知的动态代理 （1）抽象主题subject （2）真实...",
      "author": {
        "nick": "雨露",
        "homepage": "/u/yulu_5b175873aeaf9"
      }
    },
    {
      "id": "1190000016679730",
      "title": "JAVA读写EXCEL",
      "url": "/a/1190000016679730",
      "desc": "本文主要向你演示如何使用JavaExcel API来读写Excel文件。关于JavaExcel API，这是一个开源的lib库。其相关的feature如下：",
      "author": {
        "nick": "码魇",
        "homepage": "/u/ma_5b4fe416664f8"
      }
    },
    {
      "id": "1190000016679507",
      "title": "入职三天，公司给了100块钱叫我走人",
      "url": "/a/1190000016679507",
      "desc": "十月，金秋季节，本是丰收之时，却因为陆续有同事离职，心中多少有些悲凉之意，顿然想起从参加工作到现在，五年已过，当年青涩懵懂的小年轻，如今出街招摇过市时，被小孩子看到都会喊声大叔。回想这五年，有心酸...",
      "author": {
        "nick": "jaybril",
        "homepage": "/u/jaybril"
      }
    },
    {
      "id": "1190000016678536",
      "title": "红黑树插入操作的java实现",
      "url": "/a/1190000016678536",
      "desc": "网上有非常多的关于红黑树理论的描述，本文的重点将不在于此，但是会在文中给出优秀文章的链接。对红黑树不了解的建议先阅读文章再看实现。本红黑树实现不支持多线程环境。因为删除操作灰常复杂，所以后续更新。...",
      "author": {
        "nick": "raledong",
        "homepage": "/u/raledong"
      }
    },
    {
      "id": "1190000016678531",
      "title": " 设计模式之蝉——代理模式中下",
      "url": "/a/1190000016678531",
      "desc": "代理的扩展1 一个类可以实现多个接口，完成不通的功能，而且代理的目的也是在目标方法上进行一定的功能增强，而很多时候，我们写的业务代码正是对代理的增强。我们可以接着设计模式之蝉——代理模式中 的实例，添加...",
      "author": {
        "nick": "雨露",
        "homepage": "/u/yulu_5b175873aeaf9"
      }
    },
    {
      "id": "1190000016678427",
      "title": " 设计模式之蝉——代理模式中",
      "url": "/a/1190000016678427",
      "desc": "代理模式的扩展 1 普通代理 ：就是要从真实角色查找到代理角色，不允许直接访问真实角色，高程模块只要调用getProxy就可以访问真实角色的所有方法，它根本就不需要一个代理出来，代理的管理已经由真实角色自己完成。",
      "author": {
        "nick": "雨露",
        "homepage": "/u/yulu_5b175873aeaf9"
      }
    },
    {
      "id": "1190000016678186",
      "title": "我理解的数据结构（六）—— 集合和映射（Set And Map）",
      "url": "/a/1190000016678186",
      "desc": "我理解的数据结构（六）—— 集合和映射（Set And Map） 一、集合 1.典型应用场景 客户统计 词汇量统计 2.集合接口 {代码...} 3.基于二分搜索树的集合 关于二分搜索树的底层实现，大家可以去看我的另一篇文章：BST ...",
      "author": {
        "nick": "罗纳尔多Coder",
        "homepage": "/u/xiezong"
      }
    },
    {
      "id": "1190000016678085",
      "title": "设计模式之蝉——代理模式上中",
      "url": "/a/1190000016678085",
      "desc": "代理模式的扩展 1 普通代理 ：这种代理就是客户端只能访问代理角色，而不能访问真实角色。与设计模式之蝉——代理模式上 片基本差不多。（1）Subject抽象主题角色：",
      "author": {
        "nick": "雨露",
        "homepage": "/u/yulu_5b175873aeaf9"
      }
    },
    {
      "id": "1190000016677896",
      "title": "设计模式之蝉——代理模式上",
      "url": "/a/1190000016677896",
      "desc": "{代码...} {代码...} （3）Proxy代理主题角色： （4）业务场景 （5）结果",
      "author": {
        "nick": "雨露",
        "homepage": "/u/yulu_5b175873aeaf9"
      }
    },
    {
      "id": "1190000016677658",
      "title": "Redis学习",
      "url": "/a/1190000016677658",
      "desc": "最近在看《Redis开发与运维》，把自己学会的知识点记录下来，毕竟好记性不如烂笔头。 一.Redis是什么。 Redis是一个Key-Value的NoSQL数据库. 二.Redis的特点。 1.支持的数据类型：hash,list,set,zset,string（mem...",
      "author": {
        "nick": "bluesnail95",
        "homepage": "/u/bluesnail95"
      }
    }
  ]
}