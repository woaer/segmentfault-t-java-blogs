{
  "watchNum": "24350",
  "blogs": [
    {
      "id": "1190000015804487",
      "title": "Jsp页面中动态的引入另一个jsp，jsp:include路径是变量的实现",
      "url": "/a/1190000015804487",
      "desc": "在页面搭建时，会有这样的需求，希望局部页面动态的引用另一个jsp。这里的“动态”的意思引用的jsp的路径是个变量。举个例子，我们希望局部页面可能是page1.jsp或者是page2.jsp。",
      "author": {
        "nick": "奇迹之诱惑",
        "homepage": "/u/qijizhiyouhuo"
      }
    },
    {
      "id": "1190000015804406",
      "title": "（讨论）缓存同步、如何保证缓存一致性、缓存误用",
      "url": "/a/1190000015804406",
      "desc": "进程内缓存的实现载体，最简单的，可以是一个带锁的Map。又或者，可以使用第三方库，例如leveldb、guave本地缓存",
      "author": {
        "nick": "Huangy远",
        "homepage": "/u/huangyuanlu"
      }
    },
    {
      "id": "1190000015804295",
      "title": "Spring Cloud 快速入门",
      "url": "/a/1190000015804295",
      "desc": "Spring Cloud 是一个微服务框架，与 Spring Boot 结合，开发简单。将一个大工程项目，分成多个小 web 服务工程，可以分别独立扩展，又可以共同合作。",
      "author": {
        "nick": "贝哥哥",
        "homepage": "/u/beigege"
      }
    },
    {
      "id": "1190000015802954",
      "title": "【跃迁之路】【538天】程序员高效学习方法论探索系列（实验阶段295-2018.07.28）",
      "url": "/a/1190000015802954",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015802946",
      "title": "【跃迁之路】【538天】刻意练习系列297（2018.07.28）",
      "url": "/a/1190000015802946",
      "desc": "技术的精进不能只是简单的刷题，而应该是不断的“刻意”练习 该系列改版后正式纳入【跃迁之路】专栏，持续更新",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015802324",
      "title": "java项目中的classpath到底是什么",
      "url": "/a/1190000015802324",
      "desc": "在java项目中，你一定碰到过classpath，通常情况下，我们是用它来指定配置/资源文件的路径。在刚开始学习的时候，自己也糊里糊涂，但是现在，是时候弄清楚它到底是指什么了。",
      "author": {
        "nick": "柒叶",
        "homepage": "/u/qiye_5acdad75c59d1"
      }
    },
    {
      "id": "1190000015802070",
      "title": "设计模式——单件模式",
      "url": "/a/1190000015802070",
      "desc": "单件模式(Singleton)也叫单例模式，是一种创建型模式。它确保一个类只有一个实例，并提供全局访问。",
      "author": {
        "nick": "Jacob",
        "homepage": "/u/jacob93"
      }
    },
    {
      "id": "1190000015800948",
      "title": "spring 入门 2",
      "url": "/a/1190000015800948",
      "desc": "Spring介绍 Spring一站式框架 正是因为spring框架性质是属于容器性质的. 容器中装什么对象就有什么功能.所以可以一站式. 不仅不排斥其他框架,还能帮其他框架管理对象. aop支持 ioc思想 spring jdbc aop 事务 juni...",
      "author": {
        "nick": "zer0_li",
        "homepage": "/u/zer0_li"
      }
    },
    {
      "id": "1190000015800786",
      "title": "正则表达式总结",
      "url": "/a/1190000015800786",
      "desc": "正则表达式总结 @(Java知识点总结)[Java, 正则表达式] 正则表达式（regular expression） 为什么需要正则表达式？ 文本的复杂处理 。 正则表达式的优势和用途？ 一种强大而灵活的文本处理工具； 大部分编程语言、...",
      "author": {
        "nick": "苏生",
        "homepage": "/u/susheng_579d70745d3d3"
      }
    },
    {
      "id": "1190000015799121",
      "title": "Controller层利用Redis实现分布式锁（注解实现）",
      "url": "/a/1190000015799121",
      "desc": "因为此业务中有读和写的操作，写的执行条件依赖于读，并发条件下可能出现读到相同的条件均可以去执行写操作，此时写就会出现脏数据，。所以项目需要实现，在处理业务时，加锁防止并发问题，此处利用Redis实现，但...",
      "author": {
        "nick": "Belep",
        "homepage": "/u/idick"
      }
    },
    {
      "id": "1190000015798586",
      "title": "深入理解HashMap(二): 关键源码逐行分析之hash算法",
      "url": "/a/1190000015798586",
      "desc": "上一篇文章我们提到, 为了利用数组索引进行快速查找, 我们需要先将 key值映射成数组下标. 因为数组的下标是有限的集合, 所以我们可以先通过hash算法将key映射成整数, 再将整数映射成有限的数组下标:",
      "author": {
        "nick": "ChiuCheng",
        "homepage": "/u/chiucheng"
      }
    },
    {
      "id": "1190000015798187",
      "title": "深度完整的了解MySQL锁",
      "url": "/a/1190000015798187",
      "desc": "主讲：Mysql的悲观锁 和 乐观锁官方:If you query data and then insert or update related data within the same transaction, the regular SELECT statement does not give enough protection. Other transacti...",
      "author": {
        "nick": "Jackey",
        "homepage": "/u/qiuzhidoudou"
      }
    },
    {
      "id": "1190000015797402",
      "title": "Java动态代理 jdk和cglib的实现比较",
      "url": "/a/1190000015797402",
      "desc": "发现Java面试很喜欢问Spring AOP怎么实现的之类的问题，所以写一篇文章来整理一下。关于AOP和代理模式的概念这里并不做赘述，而是直奔主题，即AOP的实现方式：动态代理。与静态代理对比，动态代理是在runtime动态...",
      "author": {
        "nick": "hyuan",
        "homepage": "/u/hyuan_59cddabee3f82"
      }
    },
    {
      "id": "1190000015797105",
      "title": "当我谈Proxy与Adpater模式时，我谈些什么",
      "url": "/a/1190000015797105",
      "desc": "今天跟同事谈起了一道面试题：“Proxy模式跟Adpater模式的区别”，这两个设计模式都是很相似的模式，很多有点经验的程序员都可能会聊的头头是道，但是恐怕谈起一些设计上的细节可能就会卡壳，因此我写下了这篇文章...",
      "author": {
        "nick": "kidult_coder",
        "homepage": "/u/kidultcoder"
      }
    },
    {
      "id": "1190000015796846",
      "title": "【跃迁之路】【537天】程序员高效学习方法论探索系列（实验阶段294-2018.07.27）",
      "url": "/a/1190000015796846",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    }
  ]
}