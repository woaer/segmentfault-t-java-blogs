{
  "watchNum": "26772",
  "blogs": [
    {
      "id": "1190000016175121",
      "title": "复合优先于继承（重写equals方法引出的建议）",
      "url": "/a/1190000016175121",
      "desc": "可以发现equals方法违背了对称性原则，原因是Point的equals方法在接收ColorPoint类型的参数时，会将其当做Point进行比较，忽略了颜色的判断，认定两个类是相等的。对此我们做出一些修改：",
      "author": {
        "nick": "瓦力",
        "homepage": "/u/wallee"
      }
    },
    {
      "id": "1190000016172470",
      "title": "史上最全阿里 Java 面试题总结",
      "url": "/a/1190000016172470",
      "desc": "以下为大家整理了阿里巴巴史上最全的 Java 面试题，涉及大量 Java 面试知识点和相关试题。 JAVA基础 JAVA中的几种基本数据类型是什么，各自占用多少字节。 String类能被继承吗，为什么。 String，Stringbuffer，S...",
      "author": {
        "nick": "Java技术栈",
        "homepage": "/u/javastack"
      }
    },
    {
      "id": "1190000016170063",
      "title": "你完全没了解过的日志异步落库",
      "url": "/a/1190000016170063",
      "desc": "在互联网设计架构过程中，日志异步落库，俨然已经是高并发环节中不可缺少的一环。为什么说是高并发环节中不可缺少的呢？ 原因在于，如果直接用mq进行日志落库的时候，低并发下，生产端生产数据，然后由消费端异步...",
      "author": {
        "nick": "bali",
        "homepage": "/u/bali_5a0a92fba16aa"
      }
    },
    {
      "id": "1190000016169717",
      "title": "【跃迁之路】【568天】程序员高效学习方法论探索系列（实验阶段325-2018.08.27）",
      "url": "/a/1190000016169717",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，， 每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000016169099",
      "title": "为什么说java中只有值传递",
      "url": "/a/1190000016169099",
      "desc": "这几天在整理java基础知识方面的内容，对于值传递还不是特别理解，于是查阅了一些资料和网上相关博客，自己进行了归纳总结，最后将其整理成了一篇博客。",
      "author": {
        "nick": "dmego",
        "homepage": "/u/dmego"
      }
    },
    {
      "id": "1190000016168754",
      "title": "JAVA设计模式-观察者模式",
      "url": "/a/1190000016168754",
      "desc": "观察者模式:定义了对象之间的一对多依赖，这样一来，当一个对象状态改变时，他的所有依赖者都会收到通知并自动更新。",
      "author": {
        "nick": "DH镔",
        "homepage": "/u/dhbin"
      }
    },
    {
      "id": "1190000016168566",
      "title": "Java多线程进阶（二五）—— J.U.C之collections框架：ConcurrentSkipListMap",
      "url": "/a/1190000016168566",
      "desc": "一、ConcurrentSkipListMap简介",
      "author": {
        "nick": "NIT_EIP",
        "homepage": "/u/niteip"
      }
    },
    {
      "id": "1190000016168510",
      "title": "大话微服务架构故障隔离及容错处理机制",
      "url": "/a/1190000016168510",
      "desc": "本文首先介绍微服务架构存在的风险，然后针对如何避免微服务架构的故障，提出了多种有效的微服务架构中的方法和技术，其中例如服务降级、变更管理、健康检查和修复、断路器、限流器等。",
      "author": {
        "nick": "茶轴的青春",
        "homepage": "/u/chazhoudeqingchun"
      }
    },
    {
      "id": "1190000016168393",
      "title": "mpaas-springboot-base操作手册",
      "url": "/a/1190000016168393",
      "desc": "mpaas-springboot-base是得帆公司开发,帮助开发者开发更规范更健壮的spring boot程序",
      "author": {
        "nick": "wls1036",
        "homepage": "/u/wls1036"
      }
    },
    {
      "id": "1190000016168209",
      "title": "一步一步实现Tomcat——实现一个简单的Web服务器",
      "url": "/a/1190000016168209",
      "desc": "最近在读《How Tomcat Works》，收获颇丰，在编写书中示例的过程中也踩了不少坑。不知你有没有体会，编程就一门是“不试不知道，一试吓一跳”的实践艺术。所以我将将自己的实践过程记录下来并附上自己的思想过程编...",
      "author": {
        "nick": "JerryTse",
        "homepage": "/u/jerrytse"
      }
    },
    {
      "id": "1190000016167679",
      "title": "源码分析Kafka之Producer",
      "url": "/a/1190000016167679",
      "desc": "Kafka是一款很棒的消息系统，可以看看我之前写的 后端好书阅读与推荐来了解一下它的整体设计。今天我们就来深入了解一下它的实现细节（我fork了一份代码），首先关注Producer这一方。",
      "author": {
        "nick": "MageekChiu",
        "homepage": "/u/mageek"
      }
    },
    {
      "id": "1190000016165492",
      "title": "Dubbo项目入门",
      "url": "/a/1190000016165492",
      "desc": "Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。",
      "author": {
        "nick": "阿里云云栖社区",
        "homepage": "/u/yunqishequ_5aa899aad5395"
      }
    },
    {
      "id": "1190000016162750",
      "title": "报告！7至8月中旬项目总结！ ",
      "url": "/a/1190000016162750",
      "desc": "7月至8月中旬一直在忙公司新项目，这也是我第一次做技术领队的项目，从面试开始就一直在阅读有关技术团队管理有关的书籍，本文将简述此项目的总结，从设计到编码实现到上线测试用户反馈等方面，篇幅略长，建议收藏。",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000016159904",
      "title": "Java异常处理 10 个最佳实践",
      "url": "/a/1190000016159904",
      "desc": "异常处理是Java 开发中的一个重要部分。它是关乎每个应用的一个非功能性需求，是为了处理任何错误状况，比如资源不可访问，非法输入，空输入等等。Java提供了几个异常处理特性，以try，catch 和 finally 关键字的...",
      "author": {
        "nick": "Java技术栈",
        "homepage": "/u/javastack"
      }
    },
    {
      "id": "1190000016159835",
      "title": "阿里巴巴制定了这 16 条设计规约！",
      "url": "/a/1190000016159835",
      "desc": "说明：有缺陷的底层数据结构容易导致系统风险上升，可扩展性下降，重构成本也会因历史数据迁移和系统平滑过渡而陡然增加，所以，存储方案和数据结构需要认真地进行设计和评审，生产环境提交执行后，需要进行 doub...",
      "author": {
        "nick": "Java技术栈",
        "homepage": "/u/javastack"
      }
    }
  ]
}