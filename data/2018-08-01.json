{
  "watchNum": "24443",
  "blogs": [
    {
      "id": "1190000015843505",
      "title": "AOP的简单实现",
      "url": "/a/1190000015843505",
      "desc": "之前一篇文章分析了Java AOP的核心 - 动态代理的实现，主要是基于JDK Proxy和cglib两种不同方式。所以现在干脆把这个专题做完整，再造个简单的轮子，给出一个AOP的简单实现。这里直接使用到了cglib，这也是Spring...",
      "author": {
        "nick": "hyuan",
        "homepage": "/u/hyuan_59cddabee3f82"
      }
    },
    {
      "id": "1190000015842271",
      "title": "Spring Ldap 配置ssl 设置ad密码",
      "url": "/a/1190000015842271",
      "desc": "通过java实现ldap修改AD域用户密码 如果使用spring ldap框架的话，配置代码如下 {代码...}",
      "author": {
        "nick": "tao不是哭脸",
        "homepage": "/u/taobushikulian"
      }
    },
    {
      "id": "1190000015840285",
      "title": "【Java猫说】每日算法：#5-模板（泛型）方法之选择排序",
      "url": "/a/1190000015840285",
      "desc": "Java每日算法 分析 模板函数，泛型参数传递排序 {代码...} 编码 {代码...} 模板化选择排序 {代码...} 地址与代码获取 项目以传Github，定期更新算法内容UncleCatMySelf/java_algorithm",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000015839905",
      "title": "四大组件以及Application和Context的全面理解",
      "url": "/a/1190000015839905",
      "desc": "1.Context的实现类有很多，但是ContextImpl(后称CI)是唯一做具体工作的，其他实现都是对CI做代理。",
      "author": {
        "nick": "程序员小灰",
        "homepage": "/u/chengxuyuanxiaohui"
      }
    },
    {
      "id": "1190000015836011",
      "title": "Java反射详细介绍",
      "url": "/a/1190000015836011",
      "desc": "反射 目录介绍 1.反射概述 1.1 反射概述 1.2 获取class文件对象的三种方式 1.3 反射常用的方法介绍 1.4 反射的定义 1.5 反射的组成 1.6 反射的作用有哪些 2.反射的相关使用 2.1.1 通过反射获取无参构造方法并使用...",
      "author": {
        "nick": "潇湘剑雨",
        "homepage": "/u/xiangjianyu"
      }
    },
    {
      "id": "1190000015835683",
      "title": "【跃迁之路】【541天】程序员高效学习方法论探索系列（实验阶段298-2018.07.31）",
      "url": "/a/1190000015835683",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015835627",
      "title": "【跃迁之路】【541天】刻意练习系列300（2018.07.31）",
      "url": "/a/1190000015835627",
      "desc": "技术的精进不能只是简单的刷题，而应该是不断的“刻意”练习 该系列改版后正式纳入【跃迁之路】专栏，持续更新",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015835549",
      "title": "677-键值映射(Map Sum Pairs)",
      "url": "/a/1190000015835549",
      "desc": "实现一个 MapSum 类里的两个方法，insert 和 sum。对于方法 insert，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。 对于方法 sum，...",
      "author": {
        "nick": "Null",
        "homepage": "/u/null_ryan"
      }
    },
    {
      "id": "1190000015834753",
      "title": "【采坑实录】Hibernate报错node to traverse cannot be null排查",
      "url": "/a/1190000015834753",
      "desc": "最近在改一份二手代码的时候，项目运行报了个java.lang.IllegalArgumentException: node to traverse cannot be null异常。WTF?!难道我HQL写错了?!我只是添加了一个update方法而已啊！",
      "author": {
        "nick": "Akers",
        "homepage": "/u/akers"
      }
    },
    {
      "id": "1190000015834181",
      "title": "Element-ui实现合并多图上传（一次请求多张图片）",
      "url": "/a/1190000015834181",
      "desc": "前言 工作中碰到需要多图上传，在使用element-ui解决过程中碰到一些问题，在这里分享给大家。 环境： Springboot+Vue+Element-ui 正文 这次上传使用的是Elemet-ui的uoload上传组件，组件预留的钩子回调还是比较充...",
      "author": {
        "nick": "刘启威",
        "homepage": "/u/liuqiwei"
      }
    },
    {
      "id": "1190000015833868",
      "title": "Spring AOP 源码初窥（一） 概念",
      "url": "/a/1190000015833868",
      "desc": "AOP全称 Aspect-Oriented Programming 即面向切面编程。怎么样，是不是感觉很熟悉？对，类似的还有面向过程编程（Procedure-Oriented Programming），面向对象编程（Object-Oriented Programming）。如果对后面两...",
      "author": {
        "nick": "不苦",
        "homepage": "/u/buku_5b2a0f3280214"
      }
    },
    {
      "id": "1190000015831791",
      "title": "Java多线程进阶（十四）—— J.U.C之atomic框架：AtomicRederence类",
      "url": "/a/1190000015831791",
      "desc": "可以看到，AtomicReference持有一个对象的引用——value，并通过Unsafe类来操作该引用:",
      "author": {
        "nick": "Ressmix",
        "homepage": "/u/ressmix"
      }
    },
    {
      "id": "1190000015828241",
      "title": "弹性布局",
      "url": "/a/1190000015828241",
      "desc": "Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。",
      "author": {
        "nick": "zeyu",
        "homepage": "/u/zeyu_5b3ed9956d39e"
      }
    },
    {
      "id": "1190000015828094",
      "title": "【Java猫说】每日算法：#4-选择排序",
      "url": "/a/1190000015828094",
      "desc": "Java每日算法 分析 选择排序，一种O(n^2)的排序算法。 1、为什么学习O(n^2)的排序算法？ {代码...} 2、什么是选择排序（Selection Sort） {代码...} 编码 {代码...} 地址与代码获取 项目以传Github，定期更新算法...",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000015827227",
      "title": "JDBC查询条件中包含中文，无查询结果（编码问题）",
      "url": "/a/1190000015827227",
      "desc": "问题描述：查询条件：where name='关税'client 查询结果：正常显示jdbc 查询结果：无显示",
      "author": {
        "nick": "爱笑的猫",
        "homepage": "/u/liyancheng"
      }
    }
  ]
}