{
  "watchNum": "29931",
  "blogs": [
    {
      "id": "1190000016607911",
      "title": "Java基础【六】 - 集合框架汇总",
      "url": "/a/1190000016607911",
      "desc": "集合容器主要用于保存对象。集合容器主要分为如下四类形式保存：1、List 有序、重复的集合。2、Set 无序、不可重复。3、Queue 保持一个队列(先进先出)的顺序。4、Map 键值对存储。",
      "author": {
        "nick": "315574925",
        "homepage": "/u/315574925"
      }
    },
    {
      "id": "1190000016607721",
      "title": "SpringBoot学习",
      "url": "/a/1190000016607721",
      "desc": "Spring 优缺点 SpringBoot 诞生原因无非2种：1、对Spring的弥补2、对Spring的改善 优点 {代码...} 缺点 {代码...} SpringBoot 特点 SpringBoot 解决 Spring 上述缺点 基于Spring应用开发提供更快的入门体验 开箱...",
      "author": {
        "nick": "104828720",
        "homepage": "/u/104828720_582bfbf471440"
      }
    },
    {
      "id": "1190000016605335",
      "title": "Spring Boot （八）MyBatis + Docker + MongoDB 4.x",
      "url": "/a/1190000016605335",
      "desc": "MongoDB是一个强大、灵活，且易于扩展的通用型数据库。MongoDB是C++编写的文档型数据库，有着丰富的关系型数据库的功能，并在4.0之后添加了事务支持。",
      "author": {
        "nick": "王磊",
        "homepage": "/u/vipstone"
      }
    },
    {
      "id": "1190000016605179",
      "title": "Java编程基础25——多线程上",
      "url": "/a/1190000016605179",
      "desc": "1_多线程(多线程的引入)(了解) 1.什么是线程 线程是程序执行的一条路径, 一个进程中可以包含多条线程 多线程并发执行可以提高程序的效率, 可以同时完成多项工作 2.多线程的应用场景 红蜘蛛同时共享屏幕给多个电脑...",
      "author": {
        "nick": "扎瓦",
        "homepage": "/u/ideas"
      }
    },
    {
      "id": "1190000016604546",
      "title": "[LeetCode] 632. Smallest Range",
      "url": "/a/1190000016604546",
      "desc": "You have k lists of sorted integers in ascending order. Find the smallest range that includes at least one number from each of the k lists.",
      "author": {
        "nick": "linspiration",
        "homepage": "/u/linspiration"
      }
    },
    {
      "id": "1190000016603775",
      "title": "百亿级日志系统架构设计及优化'",
      "url": "/a/1190000016603775",
      "desc": "本文将从海量日志系统在优化、部署、监控方向如何更适应业务的需求入手，重点从多种日志系统的架构设计对比；后续调优过程：横向扩展与纵向扩展，分集群，数据分治，重写数据链路等实际现象与问题展开。",
      "author": {
        "nick": "bali",
        "homepage": "/u/bali_5a0a92fba16aa"
      }
    },
    {
      "id": "1190000016603838",
      "title": "Java中的泛型T",
      "url": "/a/1190000016603838",
      "desc": "这时候你就恍然大悟了，原来这里的T是我们自己的类，而不是泛型啊！如果我们没有一个叫做T的类，那么方法声明就会报错，找不到类T！",
      "author": {
        "nick": "柒叶",
        "homepage": "/u/qiye_5acdad75c59d1"
      }
    },
    {
      "id": "1190000016603710",
      "title": "给你一个全自动的屏幕适配方案（基于SW方案）！—— 解放你和UI的双手",
      "url": "/a/1190000016603710",
      "desc": "屏幕适配一直是移动端开发热议的问题，但是适配方案往往在实际开发的时候会和UI提供的设计稿冲突。本文主要是基于官方推荐的配置限定符方案（Smallest Width目前Android屏幕适配的最优方案）来实现一个接近完美的...",
      "author": {
        "nick": "Tangpj",
        "homepage": "/u/tangpj"
      }
    },
    {
      "id": "1190000016603392",
      "title": "API调用Netty长链接执行发送消息（在线数、用户列表）",
      "url": "/a/1190000016603392",
      "desc": "在原项目中，对于WebSocket的长连接，聊天系统并没有开放接口出来给第三方的系统调用，只有我们系统内部的人员才知道，确切的说系统内部也没有实际的查询接口，那么我们今天就来实现这个功能。",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000016603292",
      "title": "面对峰值响应冲击，解决高并发的三大策略",
      "url": "/a/1190000016603292",
      "desc": "当前在互联网+的大潮下，众所周知淘宝、京东这些交易系统每天产生的数据量都是海量的，每天的交易并发也是惊人的，尤其是“双11”、“6.18”这些活动，对系统的峰值响应提出了非常高的要求，所以对系统架构也就有了很...",
      "author": {
        "nick": "如愿",
        "homepage": "/u/javakaifa"
      }
    },
    {
      "id": "1190000016603229",
      "title": "[case40]聊聊ExecutorService的监控",
      "url": "/a/1190000016603229",
      "desc": "metrics-core-4.0.2-sources.jar!/com/codahale/metrics/InstrumentedExecutorService.java",
      "author": {
        "nick": "codecraft",
        "homepage": "/u/codecraft"
      }
    },
    {
      "id": "1190000016603136",
      "title": "AJAX 跨域解析",
      "url": "/a/1190000016603136",
      "desc": "同源策略规定，AJAX 请求（XMLHttpRequest）只能发给同源的网址，否则就会出错。所谓的同源策略是指 3 个相同：协议相同、域名相同、端口相同。",
      "author": {
        "nick": "留兰香",
        "homepage": "/u/zchen96"
      }
    },
    {
      "id": "1190000016602601",
      "title": "XXL-JOB v1.9.2 发布，分布式任务调度平台",
      "url": "/a/1190000016602601",
      "desc": "2、任务失败重试次数：新增任务属性 \"失败重试次数\"，并支持自定义，当任务失败时将会按照预设的失败重试次数主动进行重试；同时收敛废弃其他失败重试策略，如调度失败、执行失败、状态码失败等；",
      "author": {
        "nick": "xuxueli",
        "homepage": "/u/xuxueli"
      }
    },
    {
      "id": "1190000016602384",
      "title": "【跃迁之路】【603天】程序员高效学习方法论探索系列（实验阶段360-2018.10.07）",
      "url": "/a/1190000016602384",
      "desc": "从2017.10.6起，开启这个系列，目标只有一个：探索新的学习方法，实现跃迁式成长 实验期2年（2017.10.06 - 2019.10.06） 我将以自己为实验对象。 我将开源我的学习方法，方法不断更新迭代，全程记录分享 实验结束...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000016602227",
      "title": "接口到底是什么？",
      "url": "/a/1190000016602227",
      "desc": "学习Spring有一段时间了，对java也有了一点了解，最不能理解的就是接口， 即使是写了接口并实现了它，依然无法理解它到底有什么用？看了其他几篇博客，总结了一下自己的理解。",
      "author": {
        "nick": "某杰",
        "homepage": "/u/moujie"
      }
    }
  ]
}