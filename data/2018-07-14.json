{
  "watchNum": "23942",
  "blogs": [
    {
      "id": "1190000015632107",
      "title": "设计模式——观察者模式",
      "url": "/a/1190000015632107",
      "desc": "观察者模式(Observer)是行为型模式的一种，它定义了对象之间一种一对多的依赖关系，当一个对象发生改变时，依赖它的所有对象会被通知并且自动更新，它符合对象之间松耦合的设计原则。",
      "author": {
        "nick": "Jacob",
        "homepage": "/u/jacob93"
      }
    },
    {
      "id": "1190000015631344",
      "title": "源码|jdk源码之HashMap分析(一)",
      "url": "/a/1190000015631344",
      "desc": "hash表是应用最广泛的数据结构，是对键值对数据结构的一种重要实现。 它能够将关键字key映射到内存中的某一位置，查询和插入都能达到平均时间复杂度为O(1)的性能。 HashMap是java对hash表的实现，它是非线程安全...",
      "author": {
        "nick": "frapples",
        "homepage": "/u/frapples"
      }
    },
    {
      "id": "1190000015631016",
      "title": "【跃迁之路】【523天】程序员高效学习方法论探索系列（实验阶段280-2018.07.13）",
      "url": "/a/1190000015631016",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015630970",
      "title": "【跃迁之路】【523天】刻意练习系列282（2018.07.13）",
      "url": "/a/1190000015630970",
      "desc": "技术的精进不能只是简单的刷题，而应该是不断的“刻意”练习 该系列改版后正式纳入【跃迁之路】专栏，持续更新",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015630862",
      "title": "vue+Java 前后端分离，多次请求Session不一致的问题",
      "url": "/a/1190000015630862",
      "desc": "方法中有一行if( \"OPTIONS\".equals(request.getMethod())) 的判断，是因为我在做图片上传时，登录认证会失效导致跳转到登录页。后来发现原因是在做图片上传时，会在POST请求之前，先发送一个OPTION的预请求，这个...",
      "author": {
        "nick": "瓦力",
        "homepage": "/u/wallee"
      }
    },
    {
      "id": "1190000015630489",
      "title": "Java知识点总结（反射-反射机制性能问题）",
      "url": "/a/1190000015630489",
      "desc": "启用和禁用访问安全检查的开关,值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查。值为 false 则指示反射的对象应该实施 Java 语言访问检查。__并不是为true就能访问为false就不能访问__。",
      "author": {
        "nick": "苏生",
        "homepage": "/u/susheng_579d70745d3d3"
      }
    },
    {
      "id": "1190000015627737",
      "title": "【接口管理平台】eoLinker AMS 专业版 V3.5 ：加入数据结构管理、通用函数管理、API快速测试等近30项更新",
      "url": "/a/1190000015627737",
      "desc": "AMS PRO V3.5版本带来了以下几项更新内容： 更多更新内容请前往eoLinker博客，本文转自eoLinker博客。 官方网站：[链接]",
      "author": {
        "nick": "eoLinker",
        "homepage": "/u/eolinker"
      }
    },
    {
      "id": "1190000015627552",
      "title": "Java知识点总结（反射-通过反射操作类的属性和方法 ）",
      "url": "/a/1190000015627552",
      "desc": "Java知识点总结（反射-通过反射操作类的属性和方法 ） @(Java知识点总结)[Java, 反射] 使用反射操作类的属性和方法： {代码...}",
      "author": {
        "nick": "苏生",
        "homepage": "/u/susheng_579d70745d3d3"
      }
    },
    {
      "id": "1190000015627483",
      "title": "Java 特性之多态性",
      "url": "/a/1190000015627483",
      "desc": "多态（polymorphism）指同一行为具有多种不同表现形式，在面向对象程序设计中表现为同一消息可以根据发送对象的类型不同，做出多种不同的行为。",
      "author": {
        "nick": "includecmath",
        "homepage": "/u/includecmath"
      }
    },
    {
      "id": "1190000015624198",
      "title": "注解、泛型、枚举、Lambda表达式",
      "url": "/a/1190000015624198",
      "desc": "注解是JDK1.5的特性，注解本质就是一个接口，需要继承Annotation接口，使用反射让其具有功能",
      "author": {
        "nick": "104828720",
        "homepage": "/u/104828720_582bfbf471440"
      }
    },
    {
      "id": "1190000015624065",
      "title": "android ＋ PHP 简单实现登录",
      "url": "/a/1190000015624065",
      "desc": "1，使用 安卓手机，或者模拟器2，服务器支持php3，简单验证登录操作4，网络请求使用RxEasyHttp开源库，是对okhttp3，retrofit的封装，直接使用okhttp3也是可以的5，测试登录使用的url一直有效6，需要服务器的，可...",
      "author": {
        "nick": "hosition",
        "homepage": "/u/hosition"
      }
    },
    {
      "id": "1190000015622465",
      "title": "Java知识点总结（反射-获取类的信息）",
      "url": "/a/1190000015622465",
      "desc": "Java知识点总结（反射-获取类的信息） @(Java知识点总结)[Java, 反射] 应用反射的API，获取类的信息(类的名字、属性、方法、构造器等) {代码...}",
      "author": {
        "nick": "苏生",
        "homepage": "/u/susheng_579d70745d3d3"
      }
    },
    {
      "id": "1190000015622411",
      "title": "出场率比较高的一道多线程安全面试题",
      "url": "/a/1190000015622411",
      "desc": "工作一两年的应该都知道 ArrayList 是线程不安全的，要使用线程安全的就使用 Vector，这也是各种 Java 面试宝典里面所提及的，可能很多工作好几年的程序员都停留在这个知识面上。",
      "author": {
        "nick": "Java技术栈",
        "homepage": "/u/javastack"
      }
    },
    {
      "id": "1190000015622207",
      "title": "代码中的人文故事：从一个Java的“Bug”说起",
      "url": "/a/1190000015622207",
      "desc": "这几日闲来无事撸代码，无意中发现一桩趣事。原以为是一个Java的bug，没想到经过一系列死磕，挖掘出了一段和中国历史乃至人类文明相关联的人文故事，不禁唏嘘感叹一番。",
      "author": {
        "nick": "风云信步",
        "homepage": "/u/bryansharp"
      }
    },
    {
      "id": "1190000015621231",
      "title": "为 github markdown 文件生成目录",
      "url": "/a/1190000015621231",
      "desc": "在编写 github 项目时，有时候会编写各种 README.md 等 markdown 文件，但是 github 默认是没有目录的。",
      "author": {
        "nick": "叶止水",
        "homepage": "/u/houbinbin"
      }
    }
  ]
}