{
  "watchNum": "41304",
  "blogs": [
    {
      "id": "1190000018262298",
      "title": "【跃迁之路】【733天】程序员高效学习方法论探索系列（实验阶段490-2019.2.23）",
      "url": "/a/1190000018262298",
      "desc": "从2017.10.6起，开启这个系列，目标只有一个：探索新的学习方法，实现跃迁式成长 实验期2年（2017.10.06 - 2019.10.06） 我将以自己为实验对象。 我将开源我的学习方法，方法不断更新迭代，全程记录分享 实验结束...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000018262028",
      "title": "一个有趣的问题: 如何用HashSet来存储重复的字符串？",
      "url": "/a/1190000018262028",
      "desc": "今天，我们来探讨一个实际中不常用但却比较有意思的问题。它能帮助你理解 “HashSet中的键值是唯一的，不可重复的” 这句话的真正含义，也考验你对问题的思考深度。",
      "author": {
        "nick": "AlanKeene",
        "homepage": "/u/alankeene"
      }
    },
    {
      "id": "1190000018261886",
      "title": "从0开始构建SpringCloud微服务(1)",
      "url": "/a/1190000018261886",
      "desc": "本项目实现的是将一个简单的天气预报系统一步一步改造成一个SpringCloud微服务系统的过程，第一节将介绍普通天气预报系统的简单实现。",
      "author": {
        "nick": "Shimmer",
        "homepage": "/u/shimmer_5bbffffb26ebf"
      }
    },
    {
      "id": "1190000018261668",
      "title": "泛型之泛型类",
      "url": "/a/1190000018261668",
      "desc": "A是一个泛型类，T它是一个变量，需要赋类型值，如果有多个类型变量，就用逗号分隔，比如 Jdk 的 Map 接口：interface Map<K,V> {}。定义：具有一个或多个类型变量的类，称之为泛型类。泛型类是一个存在类型...",
      "author": {
        "nick": "blob",
        "homepage": "/u/myz2000"
      }
    },
    {
      "id": "1190000018261664",
      "title": "泛型之泛型方法",
      "url": "/a/1190000018261664",
      "desc": "泛型方法不受类的限制，也就是说，即使方法所在的类不是泛型类，也可以定义泛型方法；在泛型类中定义的方法，也不一定是泛型方法，就看你如何定义了。定义泛型方法的格式：修饰符 <T> 返回值 方法名() {}泛...",
      "author": {
        "nick": "blob",
        "homepage": "/u/myz2000"
      }
    },
    {
      "id": "1190000018260655",
      "title": "Nacos系列：Nacos的三种部署模式",
      "url": "/a/1190000018260655",
      "desc": "三种部署模式 Nacos支持三种部署模式 1、单机模式：可用于测试和单机使用，生产环境切忌使用单机模式（满足不了高可用） 2、集群模式：可用于生产环境，确保高可用 3、多集群模式：可用于多数据中心场景 单机模式...",
      "author": {
        "nick": "知行旅人",
        "homepage": "/u/zhixinglvren"
      }
    },
    {
      "id": "1190000018258878",
      "title": "POI实现将导入Excel文件",
      "url": "/a/1190000018258878",
      "desc": "我选择使用的是apache POI。这是有Apache软件基金会开放的函数库，他会提供API给java，使其可以对office文件进行读写。",
      "author": {
        "nick": "喵先生的进阶之路",
        "homepage": "/u/poshichao"
      }
    },
    {
      "id": "1190000018258784",
      "title": "泛型之通配符",
      "url": "/a/1190000018258784",
      "desc": "上面的代码在运行期会抛出异常：java.lang.ArrayStoreException: java.lang.String",
      "author": {
        "nick": "blob",
        "homepage": "/u/myz2000"
      }
    },
    {
      "id": "1190000018258208",
      "title": "力扣(LeetCode)78",
      "url": "/a/1190000018258208",
      "desc": "输入: nums = [1,2,3]输出:[ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], []]解答：这一题用回溯法。对于长度为n的nums数组，它的解空间应该是这样的[x1,x2,x3...,xn]这里的xn=0或者1，代表第n个数放或者不放...",
      "author": {
        "nick": "Linus脱袜子",
        "homepage": "/u/qiuqi_turing"
      }
    },
    {
      "id": "1190000018257797",
      "title": "Netty源码解析1-Buffer",
      "url": "/a/1190000018257797",
      "desc": "原文 ：GitHub原文: [链接]更多文章关注：多线程/集合/分布式/Netty/NIO/RPC Java高级特性增强-集合 Java高级特性增强-多线程 Java高级特性增强-Synchronized Java高级特性增强-volatile Java高级特性增强-并发集...",
      "author": {
        "nick": "王知无",
        "homepage": "/u/wangzhiwu"
      }
    },
    {
      "id": "1190000018257092",
      "title": "java bean 对象属性复制框架BeanMapping-01-入门案例",
      "url": "/a/1190000018257092",
      "desc": "项目简介 Bean-Mapping 用于 java 对象属性赋值。 项目中经常需要将一个对象的属性，赋值到另一个对象中。 常见的工具有很多，但都多少不够简洁，要么不够强大。 特性 支持对象属性的浅拷贝 变更日志 变更日志 快...",
      "author": {
        "nick": "叶止水",
        "homepage": "/u/houbinbin"
      }
    },
    {
      "id": "1190000018256078",
      "title": "Curator: ZooKeeper的使用配方",
      "url": "/a/1190000018256078",
      "desc": "ZooKeeper 作为分布式的存储方式, 有很多种使用场景, 把典型的使用场景提取出来, 成为\"配方\", 方便用户参考. Curator 作为这些典型场景的具体实现框架, 进一步简化了用户的使用成本.",
      "author": {
        "nick": "Yujiaao",
        "homepage": "/u/yujiaao"
      }
    },
    {
      "id": "1190000018255936",
      "title": "SpringBoot 实战 (十一) | 整合数据缓存 Cache",
      "url": "/a/1190000018255936",
      "desc": "如题，今天介绍 SpringBoot 的数据缓存。做过开发的都知道程序的瓶颈在于数据库，我们也知道内存的速度是大大快于硬盘的，当需要重复获取相同数据时，一次又一次的请求数据库或者远程服务，导致大量时间耗费在数...",
      "author": {
        "nick": "一个优秀的废人",
        "homepage": "/u/nasus"
      }
    },
    {
      "id": "1190000018255835",
      "title": "牛客网剑指offer java 全部题解",
      "url": "/a/1190000018255835",
      "desc": "经过数月的努力，终于更完了牛客网的66道剑指offer，以下的顺序和大家在牛客网的顺序是一样的（排序也花了不少时间），希望对大家找工作/提高算法能力能起到些许帮助。",
      "author": {
        "nick": "程序员乔戈里",
        "homepage": "/u/qiaogeli"
      }
    },
    {
      "id": "1190000018255796",
      "title": "力扣(LeetCode)756",
      "url": "/a/1190000018255796",
      "desc": "题目地址：[链接]题目描述：给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。 按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下： \"123\"\"132\"\"213\"\"231\"\"312\"\"321\"给定 n 和 k，返回第 k 个...",
      "author": {
        "nick": "Linus脱袜子",
        "homepage": "/u/qiuqi_turing"
      }
    }
  ]
}