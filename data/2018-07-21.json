{
  "watchNum": "24132",
  "blogs": [
    {
      "id": "1190000015714550",
      "title": "【Java猫说】项目架构的演进史（大型电商系列）",
      "url": "/a/1190000015714550",
      "desc": "大家都知道，一个真实的企业级项目开发过程、大型企业项目开发的编码思维、经验、技巧、高质量的线上作品都是需要耗费人力物力和成本，同样我们的项目也需要你挤出时间慢慢消化哦！",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000015713103",
      "title": "【跃迁之路】【530天】程序员高效学习方法论探索系列（实验阶段287-2018.07.20）",
      "url": "/a/1190000015713103",
      "desc": "从2018.7.1起，【跃迁之路】奖励金计划正式起航，从今以后，每月1日，我会将自己个人上月收入的1%计入【跃迁之路】奖励金池，积累到足够金额后，将适时用于奖励那些虽然身处困境，却依然不放弃努力，通过坚持，不...",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015713058",
      "title": "【跃迁之路】【530天】刻意练习系列289（2018.07.20）",
      "url": "/a/1190000015713058",
      "desc": "技术的精进不能只是简单的刷题，而应该是不断的“刻意”练习 该系列改版后正式纳入【跃迁之路】专栏，持续更新",
      "author": {
        "nick": "Wall_Breaker",
        "homepage": "/u/wall_breaker"
      }
    },
    {
      "id": "1190000015707859",
      "title": "SpringBoot整合Redis、ApacheSolr和SpringSession",
      "url": "/a/1190000015707859",
      "desc": "SpringBoot自从问世以来，以其方便的配置受到了广大开发者的青睐。它提供了各种starter简化很多繁琐的配置。SpringBoot整合Druid、Mybatis已经司空见惯，在这里就不详细介绍了。今天我们要介绍的是使用SpringBoot...",
      "author": {
        "nick": "阿里云云栖社区",
        "homepage": "/u/yunqishequ_5aa899aad5395"
      }
    },
    {
      "id": "1190000015710469",
      "title": "SpringMVC配置javaConfig及MessageConverter",
      "url": "/a/1190000015710469",
      "desc": "在web.xml 3.0后可以直接使用，在Servlet 3.0环境中， 容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果能发现的话， 就会用它来配置Servlet容器。Spring提供了这个接口的实现...",
      "author": {
        "nick": "前端Laoxu",
        "homepage": "/u/qianduanlaoxu"
      }
    },
    {
      "id": "1190000015710112",
      "title": "java七大设计原则",
      "url": "/a/1190000015710112",
      "desc": "开放-封闭原则的意思就是说，你设计的时候，时刻要考虑，尽量让这个类是足够好，写好了就不要去修改了，如果新需求来，我们增加一些类就完事了，原来的代码能不动则不动。这个原则有两个特性，一个是说“对于扩展...",
      "author": {
        "nick": "315574925",
        "homepage": "/u/315574925"
      }
    },
    {
      "id": "1190000015709463",
      "title": "写通俗易懂代码-用卫语句替代嵌套条件表达式",
      "url": "/a/1190000015709463",
      "desc": "在有比较复杂的判断和需要遍历处理业务时候，经常会出现上面这种情况，这些代码在执行起来是没问题。但是这样的代码是一次性代码，过一段时间，可能自己都不敢动这里的逻辑了，更何况下一个接盘侠呢。这样的代码...",
      "author": {
        "nick": "郭江江",
        "homepage": "/u/guoshuangjiang"
      }
    },
    {
      "id": "1190000015708647",
      "title": "【Java定时任务调度工具】Quartz",
      "url": "/a/1190000015708647",
      "desc": "笔记来源：IMOOC Java Quartz Quartz 简介 OpenSymphony 提供的强大的开源任务调度框架 纯 Java 实现，精细控制排程 Quartz 特点 强大的调度功能 灵活的应用方式 分布式和集群能力 主要用到的设计模式 Builder 模...",
      "author": {
        "nick": "gcusky",
        "homepage": "/u/gcusky"
      }
    },
    {
      "id": "1190000015707523",
      "title": "Java抽象类与接口的区别",
      "url": "/a/1190000015707523",
      "desc": "很多常见的面试题都会出诸如抽象类和接口有什么区别，什么情况下会使用抽象类和什么情况你会使用接口这样的问题。本文我们将仔细讨论这些话题。",
      "author": {
        "nick": "zer0_li",
        "homepage": "/u/zer0_li"
      }
    },
    {
      "id": "1190000015706600",
      "title": "泛型的优势和使用方法",
      "url": "/a/1190000015706600",
      "desc": "泛型类和泛型方法同时具备可重用性、类型安全和效率，这是非泛型类和非泛型方法无法具备的。 泛型通常用与集合以及作用于集合的方法一起使用。可重用性：比如要返回两个信息，一种是String类型的信息，一种是Inte...",
      "author": {
        "nick": "Cold不叫寇德",
        "homepage": "/u/coldbjcd"
      }
    },
    {
      "id": "1190000015706485",
      "title": "文件上传至将File转换成MultiPartFile",
      "url": "/a/1190000015706485",
      "desc": "在文件上传业务上需要将文件上传至将File转换成MultiPartFile的时候，我搜索得到采用MockMultipartFile这个类可以轻松的转换。但是，当我准备使用的时候，坑出现了。它是spring-test下的包。这个类主要是在test中...",
      "author": {
        "nick": "wotrd",
        "homepage": "/u/wotrd"
      }
    },
    {
      "id": "1190000015704640",
      "title": "【Java猫说】SSM整合Netty5.0详细说明",
      "url": "/a/1190000015704640",
      "desc": "最近又有粉丝加Q群讨论netty整合SSM项目的方式等，我在这里抽了休息日的时候整理一下，一步一步的记录，注意的是，本案例仅实现了用netty整合SSM后与单片机等类TCP应用通信。",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    },
    {
      "id": "1190000015702763",
      "title": "高级面试题总结—线程池还能这么玩？",
      "url": "/a/1190000015702763",
      "desc": "面试中我们经常会遇到多线程和线程池的问题，究竟如何回答呢？今天关于Java中的线程池，我们就来学习一下。",
      "author": {
        "nick": "程序员小灰",
        "homepage": "/u/chengxuyuanxiaohui"
      }
    },
    {
      "id": "1190000015702428",
      "title": "java使用Collection.sort指定升序或降序的三种方法",
      "url": "/a/1190000015702428",
      "desc": "第一种方法，Bean中实现Comparator接口: {代码...} BeanClass类 {代码...} 第二种方法，自定义比较器 {代码...} MyComparator类 {代码...} 第三种，和第二种一样，不过使用匿名类 {代码...}",
      "author": {
        "nick": "瓦力",
        "homepage": "/u/wallee"
      }
    },
    {
      "id": "1190000015701886",
      "title": "【Java猫说】数据封装的好处（Getter、Setter）",
      "url": "/a/1190000015701886",
      "desc": "创建Getter和Setter给所有的实例变量，并寻求某种方法强制其他程序都必须通过Setter来设定变量而不是直接的存取。",
      "author": {
        "nick": "MySelf",
        "homepage": "/u/myself_5ab9f390c6129"
      }
    }
  ]
}