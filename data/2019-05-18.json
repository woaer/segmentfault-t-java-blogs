{
  "watchNum": "51648",
  "blogs": [
    {
      "id": "1190000019219626",
      "title": "Java设计模式综合运用(动态代理+Spring AOP)",
      "url": "/a/1190000019219626",
      "desc": "AOP设计模式通常运用在日志，校验等业务场景，本文将简单介绍基于Spring的AOP代理模式的运用。",
      "author": {
        "nick": "landy8530",
        "homepage": "/u/landy8530"
      }
    },
    {
      "id": "1190000019219604",
      "title": "Java 设计模式综合运用(门面+模版方法+责任链+策略+工厂方法)",
      "url": "/a/1190000019219604",
      "desc": "在上一篇文章Java设计模式综合运用(门面+模版方法+责任链+策略)中，笔者写了一篇门面模式、模版方法、责任链跟策略模式的综合运用的事例文章，但是后来笔者发现，在实现策略模式的实现上，发现了一个弊端：那就是...",
      "author": {
        "nick": "landy8530",
        "homepage": "/u/landy8530"
      }
    },
    {
      "id": "1190000019219562",
      "title": "Java设计模式综合运用(门面+模版方法+责任链+策略)",
      "url": "/a/1190000019219562",
      "desc": "引言：很久没有更新了，主要是工作忙。最近，工作中一个子系统升级，把之前不易扩展的缺点给改进了一下，主要是运用了几个设计模式进行稍微改造了一下。本文也同步发布至简书，地址： [链接]",
      "author": {
        "nick": "landy8530",
        "homepage": "/u/landy8530"
      }
    },
    {
      "id": "1190000019218514",
      "title": "工厂模式总结",
      "url": "/a/1190000019218514",
      "desc": "原则：1.解耦：把对象的创建和使用的过程分开。2.工厂负责对象的创建，包括其init方法的调用，黑盒创建工厂。（外界不需要知道过程）3.面向接口编程：使用者只管使用，只知其接口而不知实现类。",
      "author": {
        "nick": "y猪",
        "homepage": "/u/aasadf"
      }
    },
    {
      "id": "1190000019218359",
      "title": "工厂模式(二)之建造者模式",
      "url": "/a/1190000019218359",
      "desc": "紧接着上节讲到抽象工厂模式，接下来讲建造者模式。 水果店随着业务发展，想要举行各类促销活动来提升人气。 会员购买橘子+苹果+香蕉（可能还有别的水果）立减15元 假日促销则橘子+苹果+香蕉（可能还有别的水果）...",
      "author": {
        "nick": "y猪",
        "homepage": "/u/aasadf"
      }
    },
    {
      "id": "1190000019217798",
      "title": "Java对象在JVM中的生命周期",
      "url": "/a/1190000019217798",
      "desc": "概念 在Java中，对象的生命周期包括以下几个阶段： 创建阶段(Created) 应用阶段(In Use) 不可见阶段(Invisible) 不可达阶段(Unreachable) 收集阶段(Collected) 终结阶段(Finalized) 对象空间重分配阶段(De-alloca...",
      "author": {
        "nick": "潘佳琦",
        "homepage": "/u/panjia_5b3b83f7743e9"
      }
    },
    {
      "id": "1190000019217678",
      "title": "JAVA面试题(29)",
      "url": "/a/1190000019217678",
      "desc": "本文首发于cartoon的博客    转载请注明出处:[链接] Mybatis 逻辑分页和物理分页的区别是什么？ 分页是为了节省网络传输的数据量 逻辑分页是将数据全部加载到内存，再通过后端逻辑控制分页显示到前端 物理分页是...",
      "author": {
        "nick": "cartoon",
        "homepage": "/u/cartoon_5cce2e0fb8fae"
      }
    },
    {
      "id": "1190000019217530",
      "title": "3分钟干货之认识volatile",
      "url": "/a/1190000019217530",
      "desc": "volatile能使得一个非原子操作变成原子操作吗?一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java ...",
      "author": {
        "nick": "巅峰大词典",
        "homepage": "/u/lingfeng23"
      }
    },
    {
      "id": "1190000019217467",
      "title": "leetcode445. Add Two Numbers II",
      "url": "/a/1190000019217467",
      "desc": "链表形式跟非链表形式的最大区别在于我们无法根据下标来访问对应下标的元素。假如我们希望从后往前对每个位置求和，则必须每次都从前往后访问到对应下标的值才可以。因此这里通过先将链表转置，再从左往右对每一...",
      "author": {
        "nick": "raledong",
        "homepage": "/u/raledong"
      }
    },
    {
      "id": "1190000019216831",
      "title": "Spring Boot + Mybatis + Shiro 后台权限管理系统",
      "url": "/a/1190000019216831",
      "desc": "一直想做一款后台管理系统，看了很多优秀的开源项目但是发现没有合适的。于是利用空闲休息时间开始自己写了一套后台系统。如此有了若依。她可以用于所有的Web应用程序，如网站管理后台，网站会员中心，CMS，CRM，...",
      "author": {
        "nick": "chuxia_vlog",
        "homepage": "/u/chuxia_vlog"
      }
    },
    {
      "id": "1190000019215823",
      "title": "Java锁，真的有这么复杂吗？",
      "url": "/a/1190000019215823",
      "desc": "作者前面也写了几篇关于Java并发编程，以及线程和volatil的基础知识，有兴趣可以阅读作者的原文博客，今天关于Java中的两种锁进行详解，希望对你有所帮助",
      "author": {
        "nick": "爱编码的coder",
        "homepage": "/u/chengxuyuanxiaohui"
      }
    },
    {
      "id": "1190000019191307",
      "title": "FeignClient 101 从知道到使用 ",
      "url": "/a/1190000019191307",
      "desc": "FeignClient 101 从知道到使用 抱持这看不如做的态度，一步步了解FeignClient的使用。 准备工作——初始化一个spring cloud 的项目 去网站初始化一个项目。如图 撸起袖子就是code——引入FeignClient，发第一个请求 ...",
      "author": {
        "nick": "Yangyang",
        "homepage": "/u/yangyangcao"
      }
    },
    {
      "id": "1190000019214588",
      "title": "关于springboot打包部署到Linux的简单记录",
      "url": "/a/1190000019214588",
      "desc": "由于最近自己在学习springboot的相关知识，所以就在百度云上买了个服务器，以便自己后期学习和部署自己写的项目。万里长城才开始呢。",
      "author": {
        "nick": "周兆东",
        "homepage": "/u/zhouzhaodong"
      }
    },
    {
      "id": "1190000019213693",
      "title": "debian(Linux)搭建环境跑javaweb应用",
      "url": "/a/1190000019213693",
      "desc": "2.使用docker容器搭建MySQL和redis数据库(我使用的是Portainer(Docker的图形化管理工具))",
      "author": {
        "nick": "迷彩爱人",
        "homepage": "/u/micaiairen"
      }
    },
    {
      "id": "1190000019213624",
      "title": "java常用注解",
      "url": "/a/1190000019213624",
      "desc": "@Deprecated -- @Deprecated 所标注内容，不再被建议使用。@Override -- @Override 只能标注方法，表示该方法覆盖父类中的方法。@Documented -- @Documented 所标注内容，可以出现在javadoc中。@Inherited -- @In...",
      "author": {
        "nick": "董建全",
        "homepage": "/u/dongjianquan"
      }
    }
  ]
}